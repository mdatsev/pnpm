"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("../../../lib/constants");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = require("../../../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(storage) {
  const validateInputs = (newUsers, localUsers, username, isStar) => {
    const isExistlocalUsers = _lodash.default.isNil(localUsers[username]) === false;

    if (isStar && isExistlocalUsers && localUsers[username]) {
      return true;
    } else if (!isStar && isExistlocalUsers) {
      return false;
    } else if (!isStar && !isExistlocalUsers) {
      return true;
    } else {
      return false;
    }
  };

  return (req, res, next) => {
    const name = req.params.package;

    _logger.logger.debug({
      name
    }, 'starring a package for @{name}');

    const afterChangePackage = function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.OK);
      next({
        success: true
      });
    };

    storage.getPackage({
      name,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        const newStarUser = req.body[_constants.USERS];
        const remoteUsername = req.remote_user.name;
        const localStarUsers = info[_constants.USERS]; // Check is star or unstar

        const isStar = Object.keys(newStarUser).includes(remoteUsername);

        if (_lodash.default.isNil(localStarUsers) === false && validateInputs(newStarUser, localStarUsers, remoteUsername, isStar)) {
          return afterChangePackage();
        }

        const users = isStar ? _objectSpread({}, localStarUsers, {
          [remoteUsername]: true
        }) : _lodash.default.reduce(localStarUsers, (users, value, key) => {
          if (key !== remoteUsername) {
            users[key] = value;
          }

          return users;
        }, {});
        storage.changePackage(name, _objectSpread({}, info, {
          users
        }), req.body._rev, function (err) {
          afterChangePackage(err);
        });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3N0YXIudHMiXSwibmFtZXMiOlsic3RvcmFnZSIsInZhbGlkYXRlSW5wdXRzIiwibmV3VXNlcnMiLCJsb2NhbFVzZXJzIiwidXNlcm5hbWUiLCJpc1N0YXIiLCJpc0V4aXN0bG9jYWxVc2VycyIsIl8iLCJpc05pbCIsInJlcSIsInJlcyIsIm5leHQiLCJuYW1lIiwicGFyYW1zIiwicGFja2FnZSIsImxvZ2dlciIsImRlYnVnIiwiYWZ0ZXJDaGFuZ2VQYWNrYWdlIiwiZXJyIiwic3RhdHVzIiwiSFRUUF9TVEFUVVMiLCJPSyIsInN1Y2Nlc3MiLCJnZXRQYWNrYWdlIiwiY2FsbGJhY2siLCJpbmZvIiwibmV3U3RhclVzZXIiLCJib2R5IiwiVVNFUlMiLCJyZW1vdGVVc2VybmFtZSIsInJlbW90ZV91c2VyIiwibG9jYWxTdGFyVXNlcnMiLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJ1c2VycyIsInJlZHVjZSIsInZhbHVlIiwia2V5IiwiY2hhbmdlUGFja2FnZSIsIl9yZXYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFHQTs7QUFDQTs7Ozs7Ozs7OztBQUVlLGtCQUFTQSxPQUFULEVBQXlHO0FBQ3RILFFBQU1DLGNBQWMsR0FBRyxDQUFDQyxRQUFELEVBQVdDLFVBQVgsRUFBdUJDLFFBQXZCLEVBQWlDQyxNQUFqQyxLQUFxRDtBQUMxRSxVQUFNQyxpQkFBaUIsR0FBR0MsZ0JBQUVDLEtBQUYsQ0FBUUwsVUFBVSxDQUFDQyxRQUFELENBQWxCLE1BQWtDLEtBQTVEOztBQUNBLFFBQUlDLE1BQU0sSUFBSUMsaUJBQVYsSUFBK0JILFVBQVUsQ0FBQ0MsUUFBRCxDQUE3QyxFQUF5RDtBQUN2RCxhQUFPLElBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDQyxNQUFELElBQVdDLGlCQUFmLEVBQWtDO0FBQ3ZDLGFBQU8sS0FBUDtBQUNELEtBRk0sTUFFQSxJQUFJLENBQUNELE1BQUQsSUFBVyxDQUFDQyxpQkFBaEIsRUFBbUM7QUFDeEMsYUFBTyxJQUFQO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBTyxLQUFQO0FBQ0Q7QUFDRixHQVhEOztBQWFBLFNBQU8sQ0FBQ0csR0FBRCxFQUFzQkMsR0FBdEIsRUFBcUNDLElBQXJDLEtBQXNFO0FBQzNFLFVBQU1DLElBQUksR0FBR0gsR0FBRyxDQUFDSSxNQUFKLENBQVdDLE9BQXhCOztBQUNBQyxtQkFBT0MsS0FBUCxDQUFhO0FBQUNKLE1BQUFBO0FBQUQsS0FBYixFQUFxQixnQ0FBckI7O0FBQ0EsVUFBTUssa0JBQWtCLEdBQUcsVUFBU0MsR0FBVCxFQUFzQjtBQUMvQyxVQUFJQSxHQUFKLEVBQVM7QUFDUCxlQUFPUCxJQUFJLENBQUNPLEdBQUQsQ0FBWDtBQUNEOztBQUNEUixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBV0MsdUJBQVlDLEVBQXZCO0FBQ0FWLE1BQUFBLElBQUksQ0FBQztBQUNIVyxRQUFBQSxPQUFPLEVBQUU7QUFETixPQUFELENBQUo7QUFHRCxLQVJEOztBQVVBdEIsSUFBQUEsT0FBTyxDQUFDdUIsVUFBUixDQUFtQjtBQUNqQlgsTUFBQUEsSUFEaUI7QUFFakJILE1BQUFBLEdBRmlCO0FBR2pCZSxNQUFBQSxRQUFRLEVBQUUsVUFBU04sR0FBVCxFQUFjTyxJQUFkLEVBQW9CO0FBQzVCLFlBQUlQLEdBQUosRUFBUztBQUNQLGlCQUFPUCxJQUFJLENBQUNPLEdBQUQsQ0FBWDtBQUNEOztBQUNELGNBQU1RLFdBQVcsR0FBR2pCLEdBQUcsQ0FBQ2tCLElBQUosQ0FBU0MsZ0JBQVQsQ0FBcEI7QUFDQSxjQUFNQyxjQUFjLEdBQUdwQixHQUFHLENBQUNxQixXQUFKLENBQWdCbEIsSUFBdkM7QUFDQSxjQUFNbUIsY0FBYyxHQUFHTixJQUFJLENBQUNHLGdCQUFELENBQTNCLENBTjRCLENBTzVCOztBQUNBLGNBQU12QixNQUFNLEdBQUcyQixNQUFNLENBQUNDLElBQVAsQ0FBWVAsV0FBWixFQUF5QlEsUUFBekIsQ0FBa0NMLGNBQWxDLENBQWY7O0FBQ0EsWUFBSXRCLGdCQUFFQyxLQUFGLENBQVF1QixjQUFSLE1BQTRCLEtBQTVCLElBQXFDOUIsY0FBYyxDQUFDeUIsV0FBRCxFQUFjSyxjQUFkLEVBQThCRixjQUE5QixFQUE4Q3hCLE1BQTlDLENBQXZELEVBQThHO0FBQzVHLGlCQUFPWSxrQkFBa0IsRUFBekI7QUFDRDs7QUFDRCxjQUFNa0IsS0FBSyxHQUFHOUIsTUFBTSxxQkFDZjBCLGNBRGU7QUFFbEIsV0FBQ0YsY0FBRCxHQUFrQjtBQUZBLGFBR2hCdEIsZ0JBQUU2QixNQUFGLENBQVNMLGNBQVQsRUFBeUIsQ0FBQ0ksS0FBRCxFQUFRRSxLQUFSLEVBQWVDLEdBQWYsS0FBdUI7QUFDbEQsY0FBSUEsR0FBRyxLQUFLVCxjQUFaLEVBQTRCO0FBQzFCTSxZQUFBQSxLQUFLLENBQUNHLEdBQUQsQ0FBTCxHQUFhRCxLQUFiO0FBQ0Q7O0FBQ0QsaUJBQU9GLEtBQVA7QUFDRCxTQUxHLEVBS0QsRUFMQyxDQUhKO0FBU0FuQyxRQUFBQSxPQUFPLENBQUN1QyxhQUFSLENBQXNCM0IsSUFBdEIsb0JBQWlDYSxJQUFqQztBQUF1Q1UsVUFBQUE7QUFBdkMsWUFBK0MxQixHQUFHLENBQUNrQixJQUFKLENBQVNhLElBQXhELEVBQThELFVBQVN0QixHQUFULEVBQWM7QUFDMUVELFVBQUFBLGtCQUFrQixDQUFDQyxHQUFELENBQWxCO0FBQ0QsU0FGRDtBQUdEO0FBM0JnQixLQUFuQjtBQTZCRCxHQTFDRDtBQTJDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IFVTRVJTLCBIVFRQX1NUQVRVUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHtSZXNwb25zZX0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyRSZXF1ZXN0RXh0ZW5kLCAkTmV4dEZ1bmN0aW9uVmVyLCBJU3RvcmFnZUhhbmRsZXJ9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9saWIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyKTogKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpID0+IHZvaWQge1xuICBjb25zdCB2YWxpZGF0ZUlucHV0cyA9IChuZXdVc2VycywgbG9jYWxVc2VycywgdXNlcm5hbWUsIGlzU3Rhcik6IGJvb2xlYW4gPT4ge1xuICAgIGNvbnN0IGlzRXhpc3Rsb2NhbFVzZXJzID0gXy5pc05pbChsb2NhbFVzZXJzW3VzZXJuYW1lXSkgPT09IGZhbHNlO1xuICAgIGlmIChpc1N0YXIgJiYgaXNFeGlzdGxvY2FsVXNlcnMgJiYgbG9jYWxVc2Vyc1t1c2VybmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIWlzU3RhciAmJiBpc0V4aXN0bG9jYWxVc2Vycykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzU3RhciAmJiAhaXNFeGlzdGxvY2FsVXNlcnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSByZXEucGFyYW1zLnBhY2thZ2U7XG4gICAgbG9nZ2VyLmRlYnVnKHtuYW1lfSwgJ3N0YXJyaW5nIGEgcGFja2FnZSBmb3IgQHtuYW1lfScpO1xuICAgIGNvbnN0IGFmdGVyQ2hhbmdlUGFja2FnZSA9IGZ1bmN0aW9uKGVycj86IEVycm9yKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLk9LKTtcbiAgICAgIG5leHQoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICBuYW1lLFxuICAgICAgcmVxLFxuICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGVyciwgaW5mbykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdTdGFyVXNlciA9IHJlcS5ib2R5W1VTRVJTXTtcbiAgICAgICAgY29uc3QgcmVtb3RlVXNlcm5hbWUgPSByZXEucmVtb3RlX3VzZXIubmFtZTtcbiAgICAgICAgY29uc3QgbG9jYWxTdGFyVXNlcnMgPSBpbmZvW1VTRVJTXTtcbiAgICAgICAgLy8gQ2hlY2sgaXMgc3RhciBvciB1bnN0YXJcbiAgICAgICAgY29uc3QgaXNTdGFyID0gT2JqZWN0LmtleXMobmV3U3RhclVzZXIpLmluY2x1ZGVzKHJlbW90ZVVzZXJuYW1lKTtcbiAgICAgICAgaWYgKF8uaXNOaWwobG9jYWxTdGFyVXNlcnMpID09PSBmYWxzZSAmJiB2YWxpZGF0ZUlucHV0cyhuZXdTdGFyVXNlciwgbG9jYWxTdGFyVXNlcnMsIHJlbW90ZVVzZXJuYW1lLCBpc1N0YXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGFmdGVyQ2hhbmdlUGFja2FnZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZXJzID0gaXNTdGFyID8ge1xuICAgICAgICAgIC4uLmxvY2FsU3RhclVzZXJzLFxuICAgICAgICAgIFtyZW1vdGVVc2VybmFtZV06IHRydWUsXG4gICAgICAgIH0gOiBfLnJlZHVjZShsb2NhbFN0YXJVc2VycywgKHVzZXJzLCB2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gcmVtb3RlVXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHVzZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVzZXJzO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHN0b3JhZ2UuY2hhbmdlUGFja2FnZShuYW1lLCB7IC4uLmluZm8sIHVzZXJzfSwgcmVxLmJvZHkuX3JldiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgYWZ0ZXJDaGFuZ2VQYWNrYWdlKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==