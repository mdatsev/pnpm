"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserAgent = getUserAgent;
exports.convertPayloadToBase64 = convertPayloadToBase64;
exports.validateName = validateName;
exports.validatePackage = validatePackage;
exports.isObject = isObject;
exports.validateMetadata = validateMetadata;
exports.combineBaseUrl = combineBaseUrl;
exports.extractTarballFromUrl = extractTarballFromUrl;
exports.convertDistRemoteToLocalTarballUrls = convertDistRemoteToLocalTarballUrls;
exports.getLocalRegistryTarballUri = getLocalRegistryTarballUri;
exports.tagVersion = tagVersion;
exports.getVersion = getVersion;
exports.parseAddress = parseAddress;
exports.semverSort = semverSort;
exports.normalizeDistTags = normalizeDistTags;
exports.parseInterval = parseInterval;
exports.getWebProtocol = getWebProtocol;
exports.getLatestVersion = getLatestVersion;
exports.parseConfigFile = parseConfigFile;
exports.folderExists = folderExists;
exports.fileExists = fileExists;
exports.sortByName = sortByName;
exports.addScope = addScope;
exports.deleteProperties = deleteProperties;
exports.addGravatarSupport = addGravatarSupport;
exports.parseReadme = parseReadme;
exports.buildToken = buildToken;
exports.getVersionFromTarball = getVersionFromTarball;
exports.formatAuthor = formatAuthor;
exports.isHTTPProtocol = isHTTPProtocol;
exports.pad = pad;
exports.mask = mask;
exports.encodeScopedUri = encodeScopedUri;
exports.hasDiffOneKey = hasDiffOneKey;
exports.isVersionValid = isVersionValid;
exports.ErrorCode = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _fs = _interopRequireDefault(require("fs"));

var _assert = _interopRequireDefault(require("assert"));

var _semver = _interopRequireDefault(require("semver"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _url = _interopRequireDefault(require("url"));

var _readme = _interopRequireDefault(require("@verdaccio/readme"));

var _constants = require("./constants");

var _user = require("../utils/user");

var _storageUtils = require("./storage-utils");

var _commonsApi = require("@verdaccio/commons-api");

var _logger = require("./logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('pkginfo')(module);

const pkgVersion = module.exports.version;
const pkgName = module.exports.name;

function getUserAgent() {
  (0, _assert.default)(_lodash.default.isString(pkgName));
  (0, _assert.default)(_lodash.default.isString(pkgVersion));
  return `${pkgName}/${pkgVersion}`;
}

function convertPayloadToBase64(payload) {
  return new Buffer(payload, 'base64');
}
/**
 * From normalize-package-data/lib/fixer.js
 * @param {*} name  the package name
 * @return {Boolean} whether is valid or not
 */


function validateName(name) {
  if (_lodash.default.isString(name) === false) {
    return false;
  }

  const normalizedName = name.toLowerCase();
  /**
   * Some context about the first regex
   * - npm used to have a different tarball naming system.
   * eg: http://registry.npmjs.com/thirty-two
   * https://registry.npmjs.org/thirty-two/-/thirty-two@0.0.1.tgz
   * The file name thirty-two@0.0.1.tgz, the version and the pkg name was separated by an at (@)
   * while nowadays the naming system is based in dashes
   * https://registry.npmjs.org/verdaccio/-/verdaccio-1.4.0.tgz
   *
   * more info here: https://github.com/rlidwka/sinopia/issues/75
   */

  return !(!normalizedName.match(/^[-a-zA-Z0-9_.!~*'()@]+$/) || normalizedName.startsWith('.') || // ".bin", etc.
  ['node_modules', '__proto__', 'favicon.ico'].indexOf(normalizedName) !== -1);
}
/**
 * Validate a package.
 * @return {Boolean} whether the package is valid or not
 */


function validatePackage(name) {
  const nameList = name.split('/', 2);

  if (nameList.length === 1) {
    // normal package
    return validateName(nameList[0]);
  } else {
    // scoped package
    return nameList[0][0] === '@' && validateName(nameList[0].slice(1)) && validateName(nameList[1]);
  }
}
/**
 * Check whether an element is an Object
 * @param {*} obj the element
 * @return {Boolean}
 */


function isObject(obj) {
  return _lodash.default.isObject(obj) && _lodash.default.isNull(obj) === false && _lodash.default.isArray(obj) === false;
}
/**
 * Validate the package metadata, add additional properties whether are missing within
 * the metadata properties.
 * @param {*} object
 * @param {*} name
 * @return {Object} the object with additional properties as dist-tags ad versions
 */


function validateMetadata(object, name) {
  (0, _assert.default)(isObject(object), 'not a json object');

  _assert.default.strictEqual(object.name, name);

  if (!isObject(object[_constants.DIST_TAGS])) {
    object[_constants.DIST_TAGS] = {};
  }

  if (!isObject(object['versions'])) {
    object['versions'] = {};
  }

  if (!isObject(object['time'])) {
    object['time'] = {};
  }

  return object;
}
/**
 * Create base url for registry.
 * @return {String} base registry url
 */


function combineBaseUrl(protocol, host, prefix) {
  let result = `${protocol}://${host}`;

  if (prefix) {
    prefix = prefix.replace(/\/$/, '');
    result = prefix.indexOf('/') === 0 ? `${result}${prefix}` : prefix;
  }

  return result;
}

function extractTarballFromUrl(url) {
  // @ts-ignore
  return _url.default.parse(url).pathname.replace(/^.*\//, '');
}
/**
 * Iterate a packages's versions and filter each original tarball url.
 * @param {*} pkg
 * @param {*} req
 * @param {*} config
 * @return {String} a filtered package
 */


function convertDistRemoteToLocalTarballUrls(pkg, req, urlPrefix) {
  for (const ver in pkg.versions) {
    if (Object.prototype.hasOwnProperty.call(pkg.versions, ver)) {
      const distName = pkg.versions[ver].dist;

      if (_lodash.default.isNull(distName) === false && _lodash.default.isNull(distName.tarball) === false) {
        distName.tarball = getLocalRegistryTarballUri(distName.tarball, pkg.name, req, urlPrefix);
      }
    }
  }

  return pkg;
}
/**
 * Filter a tarball url.
 * @param {*} uri
 * @return {String} a parsed url
 */


function getLocalRegistryTarballUri(uri, pkgName, req, urlPrefix) {
  const currentHost = req.headers.host;

  if (!currentHost) {
    return uri;
  }

  const tarballName = extractTarballFromUrl(uri);
  const headers = req.headers;
  const protocol = getWebProtocol(req.get(_constants.HEADERS.FORWARDED_PROTO), req.protocol);
  const domainRegistry = combineBaseUrl(protocol, headers.host, urlPrefix);
  return `${domainRegistry}/${encodeScopedUri(pkgName)}/-/${tarballName}`;
}
/**
 * Create a tag for a package
 * @param {*} data
 * @param {*} version
 * @param {*} tag
 * @return {Boolean} whether a package has been tagged
 */


function tagVersion(data, version, tag) {
  if (tag && data[_constants.DIST_TAGS][tag] !== version && _semver.default.parse(version, true)) {
    // valid version - store
    data[_constants.DIST_TAGS][tag] = version;
    return true;
  }

  return false;
}
/**
 * Gets version from a package object taking into account semver weirdness.
 * @return {String} return the semantic version of a package
 */


function getVersion(pkg, version) {
  // this condition must allow cast
  if (_lodash.default.isNil(pkg.versions[version]) === false) {
    return pkg.versions[version];
  }

  try {
    version = _semver.default.parse(version, true);

    for (const versionItem in pkg.versions) {
      // $FlowFixMe
      if (version.compare(_semver.default.parse(versionItem, true)) === 0) {
        return pkg.versions[versionItem];
      }
    }
  } catch (err) {
    return undefined;
  }
}
/**
 * Parse an internet address
 * Allow:
 - https:localhost:1234        - protocol + host + port
 - localhost:1234              - host + port
 - 1234                        - port
 - http::1234                  - protocol + port
 - https://localhost:443/      - full url + https
 - http://[::1]:443/           - ipv6
 - unix:/tmp/http.sock         - unix sockets
 - https://unix:/tmp/http.sock - unix sockets (https)
 * @param {*} urlAddress the internet address definition
 * @return {Object|Null} literal object that represent the address parsed
 */


function parseAddress(urlAddress) {
  //
  // TODO: refactor it to something more reasonable?
  //
  //        protocol :  //      (  host  )|(    ipv6     ):  port  /
  let urlPattern = /^((https?):(\/\/)?)?((([^\/:]*)|\[([^\[\]]+)\]):)?(\d+)\/?$/.exec(urlAddress);

  if (urlPattern) {
    return {
      proto: urlPattern[2] || _constants.DEFAULT_PROTOCOL,
      host: urlPattern[6] || urlPattern[7] || _constants.DEFAULT_DOMAIN,
      port: urlPattern[8] || _constants.DEFAULT_PORT
    };
  }

  urlPattern = /^((https?):(\/\/)?)?unix:(.*)$/.exec(urlAddress);

  if (urlPattern) {
    return {
      proto: urlPattern[2] || _constants.DEFAULT_PROTOCOL,
      path: urlPattern[4]
    };
  }

  return null;
}
/**
 * Function filters out bad semver versions and sorts the array.
 * @return {Array} sorted Array
 */


function semverSort(listVersions) {
  return listVersions.filter(function (x) {
    if (!_semver.default.parse(x, true)) {
      _logger.logger.warn({
        ver: x
      }, 'ignoring bad version @{ver}');

      return false;
    }

    return true;
  }) // FIXME: it seems the @types/semver do not handle a legitimate method named 'compareLoose'
  // @ts-ignore
  .sort(_semver.default.compareLoose).map(String);
}
/**
 * Flatten arrays of tags.
 * @param {*} data
 */


function normalizeDistTags(pkg) {
  let sorted;

  if (!pkg[_constants.DIST_TAGS].latest) {
    // overwrite latest with highest known version based on semver sort
    sorted = semverSort(Object.keys(pkg.versions));

    if (sorted && sorted.length) {
      pkg[_constants.DIST_TAGS].latest = sorted.pop();
    }
  }

  for (const tag in pkg[_constants.DIST_TAGS]) {
    if (_lodash.default.isArray(pkg[_constants.DIST_TAGS][tag])) {
      if (pkg[_constants.DIST_TAGS][tag].length) {
        // sort array
        // FIXME: this is clearly wrong, we need to research why this is like this.
        // @ts-ignore
        sorted = semverSort(pkg[_constants.DIST_TAGS][tag]);

        if (sorted.length) {
          // use highest version based on semver sort
          pkg[_constants.DIST_TAGS][tag] = sorted.pop();
        }
      } else {
        delete pkg[_constants.DIST_TAGS][tag];
      }
    } else if (_lodash.default.isString(pkg[_constants.DIST_TAGS][tag])) {
      if (!_semver.default.parse(pkg[_constants.DIST_TAGS][tag], true)) {
        // if the version is invalid, delete the dist-tag entry
        delete pkg[_constants.DIST_TAGS][tag];
      }
    }
  }
}

const parseIntervalTable = {
  '': 1000,
  ms: 1,
  s: 1000,
  m: 60 * 1000,
  h: 60 * 60 * 1000,
  d: 86400000,
  w: 7 * 86400000,
  M: 30 * 86400000,
  y: 365 * 86400000
};
/**
 * Parse an internal string to number
 * @param {*} interval
 * @return {Number}
 */

function parseInterval(interval) {
  if (typeof interval === 'number') {
    return interval * 1000;
  }

  let result = 0;
  let last_suffix = Infinity;
  interval.split(/\s+/).forEach(function (x) {
    if (!x) return;
    const m = x.match(/^((0|[1-9][0-9]*)(\.[0-9]+)?)(ms|s|m|h|d|w|M|y|)$/);

    if (!m || parseIntervalTable[m[4]] >= last_suffix || m[4] === '' && last_suffix !== Infinity) {
      throw Error('invalid interval: ' + interval);
    }

    last_suffix = parseIntervalTable[m[4]];
    result += Number(m[1]) * parseIntervalTable[m[4]];
  });
  return result;
}
/**
 * Detect running protocol (http or https)
 */


function getWebProtocol(headerProtocol, protocol) {
  if (typeof headerProtocol === 'string' && headerProtocol !== '') {
    const commaIndex = headerProtocol.indexOf(',');
    return commaIndex > 0 ? headerProtocol.substr(0, commaIndex) : headerProtocol;
  }

  return protocol;
}

function getLatestVersion(pkgInfo) {
  return pkgInfo[_constants.DIST_TAGS].latest;
}

const ErrorCode = {
  getConflict: _commonsApi.getConflict,
  getBadData: _commonsApi.getBadData,
  getBadRequest: _commonsApi.getBadRequest,
  getInternalError: _commonsApi.getInternalError,
  getUnauthorized: _commonsApi.getUnauthorized,
  getForbidden: _commonsApi.getForbidden,
  getServiceUnavailable: _commonsApi.getServiceUnavailable,
  getNotFound: _commonsApi.getNotFound,
  getCode: _commonsApi.getCode
};
exports.ErrorCode = ErrorCode;

function parseConfigFile(configPath) {
  try {
    if (/\.ya?ml$/i.test(configPath)) {
      return _jsYaml.default.safeLoad(_fs.default.readFileSync(configPath, _constants.CHARACTER_ENCODING.UTF8));
    } else {
      return require(configPath);
    }
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND') {
      e.message = _constants.APP_ERROR.CONFIG_NOT_VALID;
    }

    throw new Error(e);
  }
}
/**
 * Check whether the path already exist.
 * @param {String} path
 * @return {Boolean}
 */


function folderExists(path) {
  try {
    const stat = _fs.default.statSync(path);

    return stat.isDirectory();
  } catch (_) {
    return false;
  }
}
/**
 * Check whether the file already exist.
 * @param {String} path
 * @return {Boolean}
 */


function fileExists(path) {
  try {
    const stat = _fs.default.statSync(path);

    return stat.isFile();
  } catch (_) {
    return false;
  }
}

function sortByName(packages, orderAscending = true) {
  return packages.slice().sort(function (a, b) {
    const comparatorNames = a.name.toLowerCase() < b.name.toLowerCase();
    return orderAscending ? comparatorNames ? -1 : 1 : comparatorNames ? 1 : -1;
  });
}

function addScope(scope, packageName) {
  return `@${scope}/${packageName}`;
}

function deleteProperties(propertiesToDelete, objectItem) {
  _lodash.default.forEach(propertiesToDelete, property => {
    delete objectItem[property];
  });

  return objectItem;
}

function addGravatarSupport(pkgInfo, online = true) {
  const pkgInfoCopy = _objectSpread({}, pkgInfo);

  const author = _lodash.default.get(pkgInfo, 'latest.author', null);

  const contributors = (0, _storageUtils.normalizeContributors)(_lodash.default.get(pkgInfo, 'latest.contributors', []));

  const maintainers = _lodash.default.get(pkgInfo, 'latest.maintainers', []); // for author.


  if (author && _lodash.default.isObject(author)) {
    const {
      email
    } = author;
    pkgInfoCopy.latest.author.avatar = (0, _user.generateGravatarUrl)(email, online);
  }

  if (author && _lodash.default.isString(author)) {
    pkgInfoCopy.latest.author = {
      avatar: _user.GENERIC_AVATAR,
      email: '',
      author
    };
  } // for contributors


  if (_lodash.default.isEmpty(contributors) === false) {
    pkgInfoCopy.latest.contributors = contributors.map(contributor => {
      if (isObject(contributor)) {
        contributor.avatar = (0, _user.generateGravatarUrl)(contributor.email, online);
      } else if (_lodash.default.isString(contributor)) {
        contributor = {
          avatar: _user.GENERIC_AVATAR,
          email: contributor,
          name: contributor
        };
      }

      return contributor;
    });
  } // for maintainers


  if (_lodash.default.isEmpty(maintainers) === false) {
    pkgInfoCopy.latest.maintainers = maintainers.map(maintainer => {
      maintainer.avatar = (0, _user.generateGravatarUrl)(maintainer.email, online);
      return maintainer;
    });
  }

  return pkgInfoCopy;
}
/**
 * parse package readme - markdown/ascii
 * @param {String} packageName name of package
 * @param {String} readme package readme
 * @return {String} converted html template
 */


function parseReadme(packageName, readme) {
  if (_lodash.default.isEmpty(readme) === false) {
    return (0, _readme.default)(readme);
  } // logs readme not found error


  _logger.logger.error({
    packageName
  }, '@{packageName}: No readme found');

  return (0, _readme.default)('ERROR: No README data found!');
}

function buildToken(type, token) {
  return `${_lodash.default.capitalize(type)} ${token}`;
}
/**
 * return package version from tarball name
 * @param {String} name
 * @returns {String}
 */


function getVersionFromTarball(name) {
  // FIXME: we know the regex is valid, but we should improve this part as ts suggest
  // @ts-ignore
  return /.+-(\d.+)\.tgz/.test(name) ? name.match(/.+-(\d.+)\.tgz/)[1] : undefined;
}

/**
 * Formats author field for webui.
 * @see https://docs.npmjs.com/files/package.json#author
 * @param {string|object|undefined} author
 */
function formatAuthor(author) {
  let authorDetails = {
    name: _constants.DEFAULT_USER,
    email: '',
    url: ''
  };

  if (_lodash.default.isNil(author)) {
    return authorDetails;
  }

  if (_lodash.default.isString(author)) {
    authorDetails = _objectSpread({}, authorDetails, {
      name: author
    });
  }

  if (_lodash.default.isObject(author)) {
    authorDetails = _objectSpread({}, authorDetails, {}, author);
  }

  return authorDetails;
}
/**
 * Check if URI is starting with "http://", "https://" or "//"
 * @param {string} uri
 */


function isHTTPProtocol(uri) {
  return /^(https?:)?\/\//.test(uri);
}
/**
 * Apply whitespaces based on the length
 * @param {*} str the log message
 * @return {String}
 */


function pad(str, max) {
  if (str.length < max) {
    return str + ' '.repeat(max - str.length);
  }

  return str;
}
/**
 * return a masquerade string with its first and last {charNum} and three dots in between.
 * @param {String} str
 * @param {Number} charNum
 * @returns {String}
 */


function mask(str, charNum = 3) {
  return `${str.substr(0, charNum)}...${str.substr(-charNum)}`;
}

function encodeScopedUri(packageName) {
  return packageName.replace(/\//g, '%2f');
}

function hasDiffOneKey(versions) {
  return Object.keys(versions).length !== 1;
}

function isVersionValid(packageMeta, packageVersion) {
  const hasVersion = typeof packageVersion !== 'undefined';

  if (!hasVersion) {
    return false;
  }

  const hasMatchVersion = Object.keys(packageMeta.versions).includes(packageVersion);
  return hasMatchVersion;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdXRpbHMudHMiXSwibmFtZXMiOlsicmVxdWlyZSIsIm1vZHVsZSIsInBrZ1ZlcnNpb24iLCJleHBvcnRzIiwidmVyc2lvbiIsInBrZ05hbWUiLCJuYW1lIiwiZ2V0VXNlckFnZW50IiwiXyIsImlzU3RyaW5nIiwiY29udmVydFBheWxvYWRUb0Jhc2U2NCIsInBheWxvYWQiLCJCdWZmZXIiLCJ2YWxpZGF0ZU5hbWUiLCJub3JtYWxpemVkTmFtZSIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJzdGFydHNXaXRoIiwiaW5kZXhPZiIsInZhbGlkYXRlUGFja2FnZSIsIm5hbWVMaXN0Iiwic3BsaXQiLCJsZW5ndGgiLCJzbGljZSIsImlzT2JqZWN0Iiwib2JqIiwiaXNOdWxsIiwiaXNBcnJheSIsInZhbGlkYXRlTWV0YWRhdGEiLCJvYmplY3QiLCJhc3NlcnQiLCJzdHJpY3RFcXVhbCIsIkRJU1RfVEFHUyIsImNvbWJpbmVCYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwicHJlZml4IiwicmVzdWx0IiwicmVwbGFjZSIsImV4dHJhY3RUYXJiYWxsRnJvbVVybCIsInVybCIsIlVSTCIsInBhcnNlIiwicGF0aG5hbWUiLCJjb252ZXJ0RGlzdFJlbW90ZVRvTG9jYWxUYXJiYWxsVXJscyIsInBrZyIsInJlcSIsInVybFByZWZpeCIsInZlciIsInZlcnNpb25zIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGlzdE5hbWUiLCJkaXN0IiwidGFyYmFsbCIsImdldExvY2FsUmVnaXN0cnlUYXJiYWxsVXJpIiwidXJpIiwiY3VycmVudEhvc3QiLCJoZWFkZXJzIiwidGFyYmFsbE5hbWUiLCJnZXRXZWJQcm90b2NvbCIsImdldCIsIkhFQURFUlMiLCJGT1JXQVJERURfUFJPVE8iLCJkb21haW5SZWdpc3RyeSIsImVuY29kZVNjb3BlZFVyaSIsInRhZ1ZlcnNpb24iLCJkYXRhIiwidGFnIiwic2VtdmVyIiwiZ2V0VmVyc2lvbiIsImlzTmlsIiwidmVyc2lvbkl0ZW0iLCJjb21wYXJlIiwiZXJyIiwidW5kZWZpbmVkIiwicGFyc2VBZGRyZXNzIiwidXJsQWRkcmVzcyIsInVybFBhdHRlcm4iLCJleGVjIiwicHJvdG8iLCJERUZBVUxUX1BST1RPQ09MIiwiREVGQVVMVF9ET01BSU4iLCJwb3J0IiwiREVGQVVMVF9QT1JUIiwicGF0aCIsInNlbXZlclNvcnQiLCJsaXN0VmVyc2lvbnMiLCJmaWx0ZXIiLCJ4IiwibG9nZ2VyIiwid2FybiIsInNvcnQiLCJjb21wYXJlTG9vc2UiLCJtYXAiLCJTdHJpbmciLCJub3JtYWxpemVEaXN0VGFncyIsInNvcnRlZCIsImxhdGVzdCIsImtleXMiLCJwb3AiLCJwYXJzZUludGVydmFsVGFibGUiLCJtcyIsInMiLCJtIiwiaCIsImQiLCJ3IiwiTSIsInkiLCJwYXJzZUludGVydmFsIiwiaW50ZXJ2YWwiLCJsYXN0X3N1ZmZpeCIsIkluZmluaXR5IiwiZm9yRWFjaCIsIkVycm9yIiwiTnVtYmVyIiwiaGVhZGVyUHJvdG9jb2wiLCJjb21tYUluZGV4Iiwic3Vic3RyIiwiZ2V0TGF0ZXN0VmVyc2lvbiIsInBrZ0luZm8iLCJFcnJvckNvZGUiLCJnZXRDb25mbGljdCIsImdldEJhZERhdGEiLCJnZXRCYWRSZXF1ZXN0IiwiZ2V0SW50ZXJuYWxFcnJvciIsImdldFVuYXV0aG9yaXplZCIsImdldEZvcmJpZGRlbiIsImdldFNlcnZpY2VVbmF2YWlsYWJsZSIsImdldE5vdEZvdW5kIiwiZ2V0Q29kZSIsInBhcnNlQ29uZmlnRmlsZSIsImNvbmZpZ1BhdGgiLCJ0ZXN0IiwiWUFNTCIsInNhZmVMb2FkIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJDSEFSQUNURVJfRU5DT0RJTkciLCJVVEY4IiwiZSIsImNvZGUiLCJtZXNzYWdlIiwiQVBQX0VSUk9SIiwiQ09ORklHX05PVF9WQUxJRCIsImZvbGRlckV4aXN0cyIsInN0YXQiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwiZmlsZUV4aXN0cyIsImlzRmlsZSIsInNvcnRCeU5hbWUiLCJwYWNrYWdlcyIsIm9yZGVyQXNjZW5kaW5nIiwiYSIsImIiLCJjb21wYXJhdG9yTmFtZXMiLCJhZGRTY29wZSIsInNjb3BlIiwicGFja2FnZU5hbWUiLCJkZWxldGVQcm9wZXJ0aWVzIiwicHJvcGVydGllc1RvRGVsZXRlIiwib2JqZWN0SXRlbSIsInByb3BlcnR5IiwiYWRkR3JhdmF0YXJTdXBwb3J0Iiwib25saW5lIiwicGtnSW5mb0NvcHkiLCJhdXRob3IiLCJjb250cmlidXRvcnMiLCJtYWludGFpbmVycyIsImVtYWlsIiwiYXZhdGFyIiwiR0VORVJJQ19BVkFUQVIiLCJpc0VtcHR5IiwiY29udHJpYnV0b3IiLCJtYWludGFpbmVyIiwicGFyc2VSZWFkbWUiLCJyZWFkbWUiLCJlcnJvciIsImJ1aWxkVG9rZW4iLCJ0eXBlIiwidG9rZW4iLCJjYXBpdGFsaXplIiwiZ2V0VmVyc2lvbkZyb21UYXJiYWxsIiwiZm9ybWF0QXV0aG9yIiwiYXV0aG9yRGV0YWlscyIsIkRFRkFVTFRfVVNFUiIsImlzSFRUUFByb3RvY29sIiwicGFkIiwic3RyIiwibWF4IiwicmVwZWF0IiwibWFzayIsImNoYXJOdW0iLCJoYXNEaWZmT25lS2V5IiwiaXNWZXJzaW9uVmFsaWQiLCJwYWNrYWdlTWV0YSIsInBhY2thZ2VWZXJzaW9uIiwiaGFzVmVyc2lvbiIsImhhc01hdGNoVmVyc2lvbiIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFVQTs7QUFLQTs7QUFDQTs7QUFhQTs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQUEsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQkMsTUFBbkI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxNQUFNLENBQUNFLE9BQVAsQ0FBZUMsT0FBbEM7QUFDQSxNQUFNQyxPQUFPLEdBQUdKLE1BQU0sQ0FBQ0Us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QUFTK0osYUFBVCxDQUF1QnBKLFFBQXZCLEVBQTBDO0FBQy9DLFNBQU9DLE1BQU0sQ0FBQ21ELElBQVAsQ0FBWXBELFFBQVosRUFBc0IzQixNQUF0QixLQUFpQyxDQUF4QztBQUNEOztBQUVNLFNBQVNnTCxjQUFULENBQXdCQyxXQUF4QixFQUFxQ0MsY0FBckMsRUFBOEQ7QUFDbkUsUUFBTUMsVUFBVSxHQUFHLE9BQU9ELGNBQVAsS0FBMEIsV0FBN0M7O0FBQ0EsTUFBSSxDQUFDQyxVQUFMLEVBQWlCO0FBQ2YsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsZUFBZSxHQUFHeEosTUFBTSxDQUFDbUQsSUFBUCxDQUFZa0csV0FBVyxDQUFDdEosUUFBeEIsRUFBa0MwSixRQUFsQyxDQUEyQ0gsY0FBM0MsQ0FBeEI7QUFDQSxTQUFPRSxlQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCBZQU1MIGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IFVSTCBmcm9tICd1cmwnO1xuaW1wb3J0IHNhbml0aXp5UmVhZG1lIGZyb20gJ0B2ZXJkYWNjaW8vcmVhZG1lJztcblxuaW1wb3J0IHtcbiAgQVBQX0VSUk9SLFxuICBERUZBVUxUX1BPUlQsXG4gIERFRkFVTFRfRE9NQUlOLFxuICBERUZBVUxUX1BST1RPQ09MLFxuICBDSEFSQUNURVJfRU5DT0RJTkcsXG4gIEhFQURFUlMsXG4gIERJU1RfVEFHUyxcbiAgREVGQVVMVF9VU0VSLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUdyYXZhdGFyVXJsLCBHRU5FUklDX0FWQVRBUiB9IGZyb20gJy4uL3V0aWxzL3VzZXInO1xuXG5pbXBvcnQgeyBQYWNrYWdlLCBWZXJzaW9uLCBBdXRob3IgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFN0cmluZ1ZhbHVlLCBBdXRob3JBdmF0YXIgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBub3JtYWxpemVDb250cmlidXRvcnMgfSBmcm9tICcuL3N0b3JhZ2UtdXRpbHMnO1xuaW1wb3J0IHtcbiAgZ2V0Q29uZmxpY3QsXG4gIGdldEJhZERhdGEsXG4gIGdldEJhZFJlcXVlc3QsXG4gIGdldEludGVybmFsRXJyb3IsXG4gIGdldFVuYXV0aG9yaXplZCxcbiAgZ2V0Rm9yYmlkZGVuLFxuICBnZXRTZXJ2aWNlVW5hdmFpbGFibGUsXG4gIGdldE5vdEZvdW5kLFxuICBnZXRDb2RlLFxufSBmcm9tICdAdmVyZGFjY2lvL2NvbW1vbnMtYXBpJztcbmltcG9ydCB7IEluY29taW5nSHR0cEhlYWRlcnMgfSBmcm9tICdodHRwMic7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbnJlcXVpcmUoJ3BrZ2luZm8nKShtb2R1bGUpO1xuY29uc3QgcGtnVmVyc2lvbiA9IG1vZHVsZS5leHBvcnRzLnZlcnNpb247XG5jb25zdCBwa2dOYW1lID0gbW9kdWxlLmV4cG9ydHMubmFtZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpOiBzdHJpbmcge1xuICBhc3NlcnQoXy5pc1N0cmluZyhwa2dOYW1lKSk7XG4gIGFzc2VydChfLmlzU3RyaW5nKHBrZ1ZlcnNpb24pKTtcbiAgcmV0dXJuIGAke3BrZ05hbWV9LyR7cGtnVmVyc2lvbn1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFBheWxvYWRUb0Jhc2U2NChwYXlsb2FkOiBzdHJpbmcpOiBCdWZmZXIge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihwYXlsb2FkLCAnYmFzZTY0Jyk7XG59XG5cbi8qKlxuICogRnJvbSBub3JtYWxpemUtcGFja2FnZS1kYXRhL2xpYi9maXhlci5qc1xuICogQHBhcmFtIHsqfSBuYW1lICB0aGUgcGFja2FnZSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIGlzIHZhbGlkIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOYW1lKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAoXy5pc1N0cmluZyhuYW1lKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkTmFtZTogc3RyaW5nID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIC8qKlxuICAgKiBTb21lIGNvbnRleHQgYWJvdXQgdGhlIGZpcnN0IHJlZ2V4XG4gICAqIC0gbnBtIHVzZWQgdG8gaGF2ZSBhIGRpZmZlcmVudCB0YXJiYWxsIG5hbWluZyBzeXN0ZW0uXG4gICAqIGVnOiBodHRwOi8vcmVnaXN0cnkubnBtanMuY29tL3RoaXJ0eS10d29cbiAgICogaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvdGhpcnR5LXR3by8tL3RoaXJ0eS10d29AMC4wLjEudGd6XG4gICAqIFRoZSBmaWxlIG5hbWUgdGhpcnR5LXR3b0AwLjAuMS50Z3osIHRoZSB2ZXJzaW9uIGFuZCB0aGUgcGtnIG5hbWUgd2FzIHNlcGFyYXRlZCBieSBhbiBhdCAoQClcbiAgICogd2hpbGUgbm93YWRheXMgdGhlIG5hbWluZyBzeXN0ZW0gaXMgYmFzZWQgaW4gZGFzaGVzXG4gICAqIGh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnL3ZlcmRhY2Npby8tL3ZlcmRhY2Npby0xLjQuMC50Z3pcbiAgICpcbiAgICogbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ybGlkd2thL3Npbm9waWEvaXNzdWVzLzc1XG4gICAqL1xuICByZXR1cm4gIShcbiAgICAhbm9ybWFsaXplZE5hbWUubWF0Y2goL15bLWEtekEtWjAtOV8uIX4qJygpQF0rJC8pIHx8XG4gICAgbm9ybWFsaXplZE5hbWUuc3RhcnRzV2l0aCgnLicpIHx8IC8vIFwiLmJpblwiLCBldGMuXG4gICAgWydub2RlX21vZHVsZXMnLCAnX19wcm90b19fJywgJ2Zhdmljb24uaWNvJ10uaW5kZXhPZihub3JtYWxpemVkTmFtZSkgIT09IC0xXG4gICk7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgYSBwYWNrYWdlLlxuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGUgcGFja2FnZSBpcyB2YWxpZCBvciBub3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGFja2FnZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgbmFtZUxpc3QgPSBuYW1lLnNwbGl0KCcvJywgMik7XG4gIGlmIChuYW1lTGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBub3JtYWwgcGFja2FnZVxuICAgIHJldHVybiB2YWxpZGF0ZU5hbWUobmFtZUxpc3RbMF0pO1xuICB9IGVsc2Uge1xuICAgIC8vIHNjb3BlZCBwYWNrYWdlXG4gICAgcmV0dXJuIG5hbWVMaXN0WzBdWzBdID09PSAnQCcgJiYgdmFsaWRhdGVOYW1lKG5hbWVMaXN0WzBdLnNsaWNlKDEpKSAmJiB2YWxpZGF0ZU5hbWUobmFtZUxpc3RbMV0pO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBlbGVtZW50IGlzIGFuIE9iamVjdFxuICogQHBhcmFtIHsqfSBvYmogdGhlIGVsZW1lbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChvYmo6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gXy5pc09iamVjdChvYmopICYmIF8uaXNOdWxsKG9iaikgPT09IGZhbHNlICYmIF8uaXNBcnJheShvYmopID09PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGUgcGFja2FnZSBtZXRhZGF0YSwgYWRkIGFkZGl0aW9uYWwgcHJvcGVydGllcyB3aGV0aGVyIGFyZSBtaXNzaW5nIHdpdGhpblxuICogdGhlIG1ldGFkYXRhIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0geyp9IG9iamVjdFxuICogQHBhcmFtIHsqfSBuYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYXMgZGlzdC10YWdzIGFkIHZlcnNpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU1ldGFkYXRhKG9iamVjdDogUGFja2FnZSwgbmFtZTogc3RyaW5nKTogUGFja2FnZSB7XG4gIGFzc2VydChpc09iamVjdChvYmplY3QpLCAnbm90IGEganNvbiBvYmplY3QnKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKG9iamVjdC5uYW1lLCBuYW1lKTtcblxuICBpZiAoIWlzT2JqZWN0KG9iamVjdFtESVNUX1RBR1NdKSkge1xuICAgIG9iamVjdFtESVNUX1RBR1NdID0ge307XG4gIH1cblxuICBpZiAoIWlzT2JqZWN0KG9iamVjdFsndmVyc2lvbnMnXSkpIHtcbiAgICBvYmplY3RbJ3ZlcnNpb25zJ10gPSB7fTtcbiAgfVxuXG4gIGlmICghaXNPYmplY3Qob2JqZWN0Wyd0aW1lJ10pKSB7XG4gICAgb2JqZWN0Wyd0aW1lJ10gPSB7fTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogQ3JlYXRlIGJhc2UgdXJsIGZvciByZWdpc3RyeS5cbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZSByZWdpc3RyeSB1cmxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVCYXNlVXJsKHByb3RvY29sOiBzdHJpbmcsIGhvc3Q6IHN0cmluZyB8IHZvaWQsIHByZWZpeD86IHN0cmluZyB8IHZvaWQpOiBzdHJpbmcge1xuICBsZXQgcmVzdWx0ID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fWA7XG5cbiAgaWYgKHByZWZpeCkge1xuICAgIHByZWZpeCA9IHByZWZpeC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gICAgcmVzdWx0ID0gcHJlZml4LmluZGV4T2YoJy8nKSA9PT0gMCA/IGAke3Jlc3VsdH0ke3ByZWZpeH1gIDogcHJlZml4O1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUYXJiYWxsRnJvbVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmV0dXJuIFVSTC5wYXJzZSh1cmwpLnBhdGhuYW1lLnJlcGxhY2UoL14uKlxcLy8sICcnKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIGEgcGFja2FnZXMncyB2ZXJzaW9ucyBhbmQgZmlsdGVyIGVhY2ggb3JpZ2luYWwgdGFyYmFsbCB1cmwuXG4gKiBAcGFyYW0geyp9IHBrZ1xuICogQHBhcmFtIHsqfSByZXFcbiAqIEBwYXJhbSB7Kn0gY29uZmlnXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGEgZmlsdGVyZWQgcGFja2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydERpc3RSZW1vdGVUb0xvY2FsVGFyYmFsbFVybHMocGtnOiBQYWNrYWdlLCByZXE6IFJlcXVlc3QsIHVybFByZWZpeDogc3RyaW5nIHwgdm9pZCk6IFBhY2thZ2Uge1xuICBmb3IgKGNvbnN0IHZlciBpbiBwa2cudmVyc2lvbnMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBrZy52ZXJzaW9ucywgdmVyKSkge1xuICAgICAgY29uc3QgZGlzdE5hbWUgPSBwa2cudmVyc2lvbnNbdmVyXS5kaXN0O1xuXG4gICAgICBpZiAoXy5pc051bGwoZGlzdE5hbWUpID09PSBmYWxzZSAmJiBfLmlzTnVsbChkaXN0TmFtZS50YXJiYWxsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGlzdE5hbWUudGFyYmFsbCA9IGdldExvY2FsUmVnaXN0cnlUYXJiYWxsVXJpKGRpc3ROYW1lLnRhcmJhbGwsIHBrZy5uYW1lLCByZXEsIHVybFByZWZpeCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwa2c7XG59XG5cbi8qKlxuICogRmlsdGVyIGEgdGFyYmFsbCB1cmwuXG4gKiBAcGFyYW0geyp9IHVyaVxuICogQHJldHVybiB7U3RyaW5nfSBhIHBhcnNlZCB1cmxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsUmVnaXN0cnlUYXJiYWxsVXJpKFxuICB1cmk6IHN0cmluZyxcbiAgcGtnTmFtZTogc3RyaW5nLFxuICByZXE6IFJlcXVlc3QsXG4gIHVybFByZWZpeDogc3RyaW5nIHwgdm9pZFxuKTogc3RyaW5nIHtcbiAgY29uc3QgY3VycmVudEhvc3QgPSByZXEuaGVhZGVycy5ob3N0O1xuXG4gIGlmICghY3VycmVudEhvc3QpIHtcbiAgICByZXR1cm4gdXJpO1xuICB9XG4gIGNvbnN0IHRhcmJhbGxOYW1lID0gZXh0cmFjdFRhcmJhbGxGcm9tVXJsKHVyaSk7XG4gIGNvbnN0IGhlYWRlcnMgPSByZXEuaGVhZGVycyBhcyBJbmNvbWluZ0h0dHBIZWFkZXJzO1xuICBjb25zdCBwcm90b2NvbCA9IGdldFdlYlByb3RvY29sKHJlcS5nZXQoSEVBREVSUy5GT1JXQVJERURfUFJPVE8pLCByZXEucHJvdG9jb2wpO1xuICBjb25zdCBkb21haW5SZWdpc3RyeSA9IGNvbWJpbmVCYXNlVXJsKHByb3RvY29sLCBoZWFkZXJzLmhvc3QsIHVybFByZWZpeCk7XG5cbiAgcmV0dXJuIGAke2RvbWFpblJlZ2lzdHJ5fS8ke2VuY29kZVNjb3BlZFVyaShwa2dOYW1lKX0vLS8ke3RhcmJhbGxOYW1lfWA7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgdGFnIGZvciBhIHBhY2thZ2VcbiAqIEBwYXJhbSB7Kn0gZGF0YVxuICogQHBhcmFtIHsqfSB2ZXJzaW9uXG4gKiBAcGFyYW0geyp9IHRhZ1xuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciBhIHBhY2thZ2UgaGFzIGJlZW4gdGFnZ2VkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWdWZXJzaW9uKGRhdGE6IFBhY2thZ2UsIHZlcnNpb246IHN0cmluZywgdGFnOiBTdHJpbmdWYWx1ZSk6IGJvb2xlYW4ge1xuICBpZiAodGFnICYmIGRhdGFbRElTVF9UQUdTXVt0YWddICE9PSB2ZXJzaW9uICYmIHNlbXZlci5wYXJzZSh2ZXJzaW9uLCB0cnVlKSkge1xuICAgIC8vIHZhbGlkIHZlcnNpb24gLSBzdG9yZVxuICAgIGRhdGFbRElTVF9UQUdTXVt0YWddID0gdmVyc2lvbjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogR2V0cyB2ZXJzaW9uIGZyb20gYSBwYWNrYWdlIG9iamVjdCB0YWtpbmcgaW50byBhY2NvdW50IHNlbXZlciB3ZWlyZG5lc3MuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybiB0aGUgc2VtYW50aWMgdmVyc2lvbiBvZiBhIHBhY2thZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb24ocGtnOiBQYWNrYWdlLCB2ZXJzaW9uOiBhbnkpOiBWZXJzaW9uIHwgdm9pZCB7XG4gIC8vIHRoaXMgY29uZGl0aW9uIG11c3QgYWxsb3cgY2FzdFxuICBpZiAoXy5pc05pbChwa2cudmVyc2lvbnNbdmVyc2lvbl0pID09PSBmYWxzZSkge1xuICAgIHJldHVybiBwa2cudmVyc2lvbnNbdmVyc2lvbl07XG4gIH1cblxuICB0cnkge1xuICAgIHZlcnNpb24gPSBzZW12ZXIucGFyc2UodmVyc2lvbiwgdHJ1ZSk7XG4gICAgZm9yIChjb25zdCB2ZXJzaW9uSXRlbSBpbiBwa2cudmVyc2lvbnMpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGlmICh2ZXJzaW9uLmNvbXBhcmUoc2VtdmVyLnBhcnNlKHZlcnNpb25JdGVtLCB0cnVlKSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHBrZy52ZXJzaW9uc1t2ZXJzaW9uSXRlbV07XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gaW50ZXJuZXQgYWRkcmVzc1xuICogQWxsb3c6XG4gLSBodHRwczpsb2NhbGhvc3Q6MTIzNCAgICAgICAgLSBwcm90b2NvbCArIGhvc3QgKyBwb3J0XG4gLSBsb2NhbGhvc3Q6MTIzNCAgICAgICAgICAgICAgLSBob3N0ICsgcG9ydFxuIC0gMTIzNCAgICAgICAgICAgICAgICAgICAgICAgIC0gcG9ydFxuIC0gaHR0cDo6MTIzNCAgICAgICAgICAgICAgICAgIC0gcHJvdG9jb2wgKyBwb3J0XG4gLSBodHRwczovL2xvY2FsaG9zdDo0NDMvICAgICAgLSBmdWxsIHVybCArIGh0dHBzXG4gLSBodHRwOi8vWzo6MV06NDQzLyAgICAgICAgICAgLSBpcHY2XG4gLSB1bml4Oi90bXAvaHR0cC5zb2NrICAgICAgICAgLSB1bml4IHNvY2tldHNcbiAtIGh0dHBzOi8vdW5peDovdG1wL2h0dHAuc29jayAtIHVuaXggc29ja2V0cyAoaHR0cHMpXG4gKiBAcGFyYW0geyp9IHVybEFkZHJlc3MgdGhlIGludGVybmV0IGFkZHJlc3MgZGVmaW5pdGlvblxuICogQHJldHVybiB7T2JqZWN0fE51bGx9IGxpdGVyYWwgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhZGRyZXNzIHBhcnNlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBZGRyZXNzKHVybEFkZHJlc3M6IGFueSk6IGFueSB7XG4gIC8vXG4gIC8vIFRPRE86IHJlZmFjdG9yIGl0IHRvIHNvbWV0aGluZyBtb3JlIHJlYXNvbmFibGU/XG4gIC8vXG4gIC8vICAgICAgICBwcm90b2NvbCA6ICAvLyAgICAgICggIGhvc3QgICl8KCAgICBpcHY2ICAgICApOiAgcG9ydCAgL1xuICBsZXQgdXJsUGF0dGVybiA9IC9eKChodHRwcz8pOihcXC9cXC8pPyk/KCgoW15cXC86XSopfFxcWyhbXlxcW1xcXV0rKVxcXSk6KT8oXFxkKylcXC8/JC8uZXhlYyh1cmxBZGRyZXNzKTtcblxuICBpZiAodXJsUGF0dGVybikge1xuICAgIHJldHVybiB7XG4gICAgICBwcm90bzogdXJsUGF0dGVyblsyXSB8fCBERUZBVUxUX1BST1RPQ09MLFxuICAgICAgaG9zdDogdXJsUGF0dGVybls2XSB8fCB1cmxQYXR0ZXJuWzddIHx8IERFRkFVTFRfRE9NQUlOLFxuICAgICAgcG9ydDogdXJsUGF0dGVybls4XSB8fCBERUZBVUxUX1BPUlQsXG4gICAgfTtcbiAgfVxuXG4gIHVybFBhdHRlcm4gPSAvXigoaHR0cHM/KTooXFwvXFwvKT8pP3VuaXg6KC4qKSQvLmV4ZWModXJsQWRkcmVzcyk7XG5cbiAgaWYgKHVybFBhdHRlcm4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvdG86IHVybFBhdHRlcm5bMl0gfHwgREVGQVVMVF9QUk9UT0NPTCxcbiAgICAgIHBhdGg6IHVybFBhdHRlcm5bNF0sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGZpbHRlcnMgb3V0IGJhZCBzZW12ZXIgdmVyc2lvbnMgYW5kIHNvcnRzIHRoZSBhcnJheS5cbiAqIEByZXR1cm4ge0FycmF5fSBzb3J0ZWQgQXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbXZlclNvcnQobGlzdFZlcnNpb25zOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIChcbiAgICBsaXN0VmVyc2lvbnNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oeCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXNlbXZlci5wYXJzZSh4LCB0cnVlKSkge1xuICAgICAgICAgIGxvZ2dlci53YXJuKHsgdmVyOiB4IH0sICdpZ25vcmluZyBiYWQgdmVyc2lvbiBAe3Zlcn0nKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KVxuICAgICAgLy8gRklYTUU6IGl0IHNlZW1zIHRoZSBAdHlwZXMvc2VtdmVyIGRvIG5vdCBoYW5kbGUgYSBsZWdpdGltYXRlIG1ldGhvZCBuYW1lZCAnY29tcGFyZUxvb3NlJ1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgLnNvcnQoc2VtdmVyLmNvbXBhcmVMb29zZSlcbiAgICAgIC5tYXAoU3RyaW5nKVxuICApO1xufVxuXG4vKipcbiAqIEZsYXR0ZW4gYXJyYXlzIG9mIHRhZ3MuXG4gKiBAcGFyYW0geyp9IGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZURpc3RUYWdzKHBrZzogUGFja2FnZSk6IHZvaWQge1xuICBsZXQgc29ydGVkO1xuICBpZiAoIXBrZ1tESVNUX1RBR1NdLmxhdGVzdCkge1xuICAgIC8vIG92ZXJ3cml0ZSBsYXRlc3Qgd2l0aCBoaWdoZXN0IGtub3duIHZlcnNpb24gYmFzZWQgb24gc2VtdmVyIHNvcnRcbiAgICBzb3J0ZWQgPSBzZW12ZXJTb3J0KE9iamVjdC5rZXlzKHBrZy52ZXJzaW9ucykpO1xuICAgIGlmIChzb3J0ZWQgJiYgc29ydGVkLmxlbmd0aCkge1xuICAgICAgcGtnW0RJU1RfVEFHU10ubGF0ZXN0ID0gc29ydGVkLnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgdGFnIGluIHBrZ1tESVNUX1RBR1NdKSB7XG4gICAgaWYgKF8uaXNBcnJheShwa2dbRElTVF9UQUdTXVt0YWddKSkge1xuICAgICAgaWYgKHBrZ1tESVNUX1RBR1NdW3RhZ10ubGVuZ3RoKSB7XG4gICAgICAgIC8vIHNvcnQgYXJyYXlcbiAgICAgICAgLy8gRklYTUU6IHRoaXMgaXMgY2xlYXJseSB3cm9uZywgd2UgbmVlZCB0byByZXNlYXJjaCB3aHkgdGhpcyBpcyBsaWtlIHRoaXMuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc29ydGVkID0gc2VtdmVyU29ydChwa2dbRElTVF9UQUdTXVt0YWddKTtcbiAgICAgICAgaWYgKHNvcnRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB1c2UgaGlnaGVzdCB2ZXJzaW9uIGJhc2VkIG9uIHNlbXZlciBzb3J0XG4gICAgICAgICAgcGtnW0RJU1RfVEFHU11bdGFnXSA9IHNvcnRlZC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHBrZ1tESVNUX1RBR1NdW3RhZ107XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfLmlzU3RyaW5nKHBrZ1tESVNUX1RBR1NdW3RhZ10pKSB7XG4gICAgICBpZiAoIXNlbXZlci5wYXJzZShwa2dbRElTVF9UQUdTXVt0YWddLCB0cnVlKSkge1xuICAgICAgICAvLyBpZiB0aGUgdmVyc2lvbiBpcyBpbnZhbGlkLCBkZWxldGUgdGhlIGRpc3QtdGFnIGVudHJ5XG4gICAgICAgIGRlbGV0ZSBwa2dbRElTVF9UQUdTXVt0YWddO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBwYXJzZUludGVydmFsVGFibGUgPSB7XG4gICcnOiAxMDAwLFxuICBtczogMSxcbiAgczogMTAwMCxcbiAgbTogNjAgKiAxMDAwLFxuICBoOiA2MCAqIDYwICogMTAwMCxcbiAgZDogODY0MDAwMDAsXG4gIHc6IDcgKiA4NjQwMDAwMCxcbiAgTTogMzAgKiA4NjQwMDAwMCxcbiAgeTogMzY1ICogODY0MDAwMDAsXG59O1xuXG4vKipcbiAqIFBhcnNlIGFuIGludGVybmFsIHN0cmluZyB0byBudW1iZXJcbiAqIEBwYXJhbSB7Kn0gaW50ZXJ2YWxcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50ZXJ2YWwoaW50ZXJ2YWw6IGFueSk6IG51bWJlciB7XG4gIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGludGVydmFsICogMTAwMDtcbiAgfVxuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IGxhc3Rfc3VmZml4ID0gSW5maW5pdHk7XG4gIGludGVydmFsLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbih4KTogdm9pZCB7XG4gICAgaWYgKCF4KSByZXR1cm47XG4gICAgY29uc3QgbSA9IHgubWF0Y2goL14oKDB8WzEtOV1bMC05XSopKFxcLlswLTldKyk/KShtc3xzfG18aHxkfHd8TXx5fCkkLyk7XG4gICAgaWYgKCFtIHx8IHBhcnNlSW50ZXJ2YWxUYWJsZVttWzRdXSA+PSBsYXN0X3N1ZmZpeCB8fCAobVs0XSA9PT0gJycgJiYgbGFzdF9zdWZmaXggIT09IEluZmluaXR5KSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgaW50ZXJ2YWw6ICcgKyBpbnRlcnZhbCk7XG4gICAgfVxuICAgIGxhc3Rfc3VmZml4ID0gcGFyc2VJbnRlcnZhbFRhYmxlW21bNF1dO1xuICAgIHJlc3VsdCArPSBOdW1iZXIobVsxXSkgKiBwYXJzZUludGVydmFsVGFibGVbbVs0XV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVjdCBydW5uaW5nIHByb3RvY29sIChodHRwIG9yIGh0dHBzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2ViUHJvdG9jb2woaGVhZGVyUHJvdG9jb2w6IHN0cmluZyB8IHZvaWQsIHByb3RvY29sOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIGhlYWRlclByb3RvY29sID09PSAnc3RyaW5nJyAmJiBoZWFkZXJQcm90b2NvbCAhPT0gJycpIHtcbiAgICBjb25zdCBjb21tYUluZGV4ID0gaGVhZGVyUHJvdG9jb2wuaW5kZXhPZignLCcpO1xuICAgIHJldHVybiBjb21tYUluZGV4ID4gMCA/IGhlYWRlclByb3RvY29sLnN1YnN0cigwLCBjb21tYUluZGV4KSA6IGhlYWRlclByb3RvY29sO1xuICB9XG5cbiAgcmV0dXJuIHByb3RvY29sO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGF0ZXN0VmVyc2lvbihwa2dJbmZvOiBQYWNrYWdlKTogc3RyaW5nIHtcbiAgcmV0dXJuIHBrZ0luZm9bRElTVF9UQUdTXS5sYXRlc3Q7XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvckNvZGUgPSB7XG4gIGdldENvbmZsaWN0LFxuICBnZXRCYWREYXRhLFxuICBnZXRCYWRSZXF1ZXN0LFxuICBnZXRJbnRlcm5hbEVycm9yLFxuICBnZXRVbmF1dGhvcml6ZWQsXG4gIGdldEZvcmJpZGRlbixcbiAgZ2V0U2VydmljZVVuYXZhaWxhYmxlLFxuICBnZXROb3RGb3VuZCxcbiAgZ2V0Q29kZSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbmZpZ0ZpbGUoY29uZmlnUGF0aDogc3RyaW5nKTogYW55IHtcbiAgdHJ5IHtcbiAgICBpZiAoL1xcLnlhP21sJC9pLnRlc3QoY29uZmlnUGF0aCkpIHtcbiAgICAgIHJldHVybiBZQU1MLnNhZmVMb2FkKGZzLnJlYWRGaWxlU3luYyhjb25maWdQYXRoLCBDSEFSQUNURVJfRU5DT0RJTkcuVVRGOCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVxdWlyZShjb25maWdQYXRoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5jb2RlICE9PSAnTU9EVUxFX05PVF9GT1VORCcpIHtcbiAgICAgIGUubWVzc2FnZSA9IEFQUF9FUlJPUi5DT05GSUdfTk9UX1ZBTElEO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihlKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIHBhdGggYWxyZWFkeSBleGlzdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9sZGVyRXhpc3RzKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhwYXRoKTtcbiAgICByZXR1cm4gc3RhdC5pc0RpcmVjdG9yeSgpO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWxlRXhpc3RzKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhwYXRoKTtcbiAgICByZXR1cm4gc3RhdC5pc0ZpbGUoKTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydEJ5TmFtZShwYWNrYWdlczogYW55W10sIG9yZGVyQXNjZW5kaW5nOiBib29sZWFuIHwgdm9pZCA9IHRydWUpOiBzdHJpbmdbXSB7XG4gIHJldHVybiBwYWNrYWdlcy5zbGljZSgpLnNvcnQoZnVuY3Rpb24oYSwgYik6IG51bWJlciB7XG4gICAgY29uc3QgY29tcGFyYXRvck5hbWVzID0gYS5uYW1lLnRvTG93ZXJDYXNlKCkgPCBiLm5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBvcmRlckFzY2VuZGluZyA/IChjb21wYXJhdG9yTmFtZXMgPyAtMSA6IDEpIDogY29tcGFyYXRvck5hbWVzID8gMSA6IC0xO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNjb3BlKHNjb3BlOiBzdHJpbmcsIHBhY2thZ2VOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYEAke3Njb3BlfS8ke3BhY2thZ2VOYW1lfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0aWVzKHByb3BlcnRpZXNUb0RlbGV0ZTogc3RyaW5nW10sIG9iamVjdEl0ZW06IGFueSk6IGFueSB7XG4gIF8uZm9yRWFjaChwcm9wZXJ0aWVzVG9EZWxldGUsIChwcm9wZXJ0eSk6IGFueSA9PiB7XG4gICAgZGVsZXRlIG9iamVjdEl0ZW1bcHJvcGVydHldO1xuICB9KTtcblxuICByZXR1cm4gb2JqZWN0SXRlbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEdyYXZhdGFyU3VwcG9ydChwa2dJbmZvOiBQYWNrYWdlLCBvbmxpbmUgPSB0cnVlKTogQXV0aG9yQXZhdGFyIHtcbiAgY29uc3QgcGtnSW5mb0NvcHkgPSB7IC4uLnBrZ0luZm8gfSBhcyBhbnk7XG4gIGNvbnN0IGF1dGhvcjogYW55ID0gXy5nZXQocGtnSW5mbywgJ2xhdGVzdC5hdXRob3InLCBudWxsKSBhcyBhbnk7XG4gIGNvbnN0IGNvbnRyaWJ1dG9yczogQXV0aG9yQXZhdGFyW10gPSBub3JtYWxpemVDb250cmlidXRvcnMoXy5nZXQocGtnSW5mbywgJ2xhdGVzdC5jb250cmlidXRvcnMnLCBbXSkpO1xuICBjb25zdCBtYWludGFpbmVycyA9IF8uZ2V0KHBrZ0luZm8sICdsYXRlc3QubWFpbnRhaW5lcnMnLCBbXSk7XG5cbiAgLy8gZm9yIGF1dGhvci5cbiAgaWYgKGF1dGhvciAmJiBfLmlzT2JqZWN0KGF1dGhvcikpIHtcbiAgICBjb25zdCB7IGVtYWlsIH0gPSBhdXRob3IgYXMgQXV0aG9yO1xuICAgIHBrZ0luZm9Db3B5LmxhdGVzdC5hdXRob3IuYXZhdGFyID0gZ2VuZXJhdGVHcmF2YXRhclVybChlbWFpbCwgb25saW5lKTtcbiAgfVxuXG4gIGlmIChhdXRob3IgJiYgXy5pc1N0cmluZyhhdXRob3IpKSB7XG4gICAgcGtnSW5mb0NvcHkubGF0ZXN0LmF1dGhvciA9IHtcbiAgICAgIGF2YXRhcjogR0VORVJJQ19BVkFUQVIsXG4gICAgICBlbWFpbDogJycsXG4gICAgICBhdXRob3IsXG4gICAgfTtcbiAgfVxuXG4gIC8vIGZvciBjb250cmlidXRvcnNcbiAgaWYgKF8uaXNFbXB0eShjb250cmlidXRvcnMpID09PSBmYWxzZSkge1xuICAgIHBrZ0luZm9Db3B5LmxhdGVzdC5jb250cmlidXRvcnMgPSBjb250cmlidXRvcnMubWFwKFxuICAgICAgKGNvbnRyaWJ1dG9yKTogQXV0aG9yQXZhdGFyID0+IHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGNvbnRyaWJ1dG9yKSkge1xuICAgICAgICAgIGNvbnRyaWJ1dG9yLmF2YXRhciA9IGdlbmVyYXRlR3JhdmF0YXJVcmwoY29udHJpYnV0b3IuZW1haWwsIG9ubGluZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5pc1N0cmluZyhjb250cmlidXRvcikpIHtcbiAgICAgICAgICBjb250cmlidXRvciA9IHtcbiAgICAgICAgICAgIGF2YXRhcjogR0VORVJJQ19BVkFUQVIsXG4gICAgICAgICAgICBlbWFpbDogY29udHJpYnV0b3IsXG4gICAgICAgICAgICBuYW1lOiBjb250cmlidXRvcixcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dG9yO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvLyBmb3IgbWFpbnRhaW5lcnNcbiAgaWYgKF8uaXNFbXB0eShtYWludGFpbmVycykgPT09IGZhbHNlKSB7XG4gICAgcGtnSW5mb0NvcHkubGF0ZXN0Lm1haW50YWluZXJzID0gbWFpbnRhaW5lcnMubWFwKChtYWludGFpbmVyKTogdm9pZCA9PiB7XG4gICAgICBtYWludGFpbmVyLmF2YXRhciA9IGdlbmVyYXRlR3JhdmF0YXJVcmwobWFpbnRhaW5lci5lbWFpbCwgb25saW5lKTtcbiAgICAgIHJldHVybiBtYWludGFpbmVyO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBrZ0luZm9Db3B5O1xufVxuXG4vKipcbiAqIHBhcnNlIHBhY2thZ2UgcmVhZG1lIC0gbWFya2Rvd24vYXNjaWlcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrYWdlTmFtZSBuYW1lIG9mIHBhY2thZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFkbWUgcGFja2FnZSByZWFkbWVcbiAqIEByZXR1cm4ge1N0cmluZ30gY29udmVydGVkIGh0bWwgdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVhZG1lKHBhY2thZ2VOYW1lOiBzdHJpbmcsIHJlYWRtZTogc3RyaW5nKTogc3RyaW5nIHwgdm9pZCB7XG4gIGlmIChfLmlzRW1wdHkocmVhZG1lKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gc2FuaXRpenlSZWFkbWUocmVhZG1lKTtcbiAgfVxuXG4gIC8vIGxvZ3MgcmVhZG1lIG5vdCBmb3VuZCBlcnJvclxuICBsb2dnZXIuZXJyb3IoeyBwYWNrYWdlTmFtZSB9LCAnQHtwYWNrYWdlTmFtZX06IE5vIHJlYWRtZSBmb3VuZCcpO1xuXG4gIHJldHVybiBzYW5pdGl6eVJlYWRtZSgnRVJST1I6IE5vIFJFQURNRSBkYXRhIGZvdW5kIScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRUb2tlbih0eXBlOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7Xy5jYXBpdGFsaXplKHR5cGUpfSAke3Rva2VufWA7XG59XG5cbi8qKlxuICogcmV0dXJuIHBhY2thZ2UgdmVyc2lvbiBmcm9tIHRhcmJhbGwgbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWZXJzaW9uRnJvbVRhcmJhbGwobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdm9pZCB7XG4gIC8vIEZJWE1FOiB3ZSBrbm93IHRoZSByZWdleCBpcyB2YWxpZCwgYnV0IHdlIHNob3VsZCBpbXByb3ZlIHRoaXMgcGFydCBhcyB0cyBzdWdnZXN0XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmV0dXJuIC8uKy0oXFxkLispXFwudGd6Ly50ZXN0KG5hbWUpID8gbmFtZS5tYXRjaCgvListKFxcZC4rKVxcLnRnei8pWzFdIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBBdXRob3JGb3JtYXQgPSBBdXRob3IgfCBzdHJpbmcgfCBudWxsIHwgb2JqZWN0IHwgdm9pZDtcblxuLyoqXG4gKiBGb3JtYXRzIGF1dGhvciBmaWVsZCBmb3Igd2VidWkuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5ucG1qcy5jb20vZmlsZXMvcGFja2FnZS5qc29uI2F1dGhvclxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fHVuZGVmaW5lZH0gYXV0aG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBdXRob3IoYXV0aG9yOiBBdXRob3JGb3JtYXQpOiBhbnkge1xuICBsZXQgYXV0aG9yRGV0YWlscyA9IHtcbiAgICBuYW1lOiBERUZBVUxUX1VTRVIsXG4gICAgZW1haWw6ICcnLFxuICAgIHVybDogJycsXG4gIH07XG5cbiAgaWYgKF8uaXNOaWwoYXV0aG9yKSkge1xuICAgIHJldHVybiBhdXRob3JEZXRhaWxzO1xuICB9XG5cbiAgaWYgKF8uaXNTdHJpbmcoYXV0aG9yKSkge1xuICAgIGF1dGhvckRldGFpbHMgPSB7XG4gICAgICAuLi5hdXRob3JEZXRhaWxzLFxuICAgICAgbmFtZTogYXV0aG9yIGFzIHN0cmluZyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKF8uaXNPYmplY3QoYXV0aG9yKSkge1xuICAgIGF1dGhvckRldGFpbHMgPSB7XG4gICAgICAuLi5hdXRob3JEZXRhaWxzLFxuICAgICAgLi4uKGF1dGhvciBhcyBBdXRob3IpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gYXV0aG9yRGV0YWlscztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBVUkkgaXMgc3RhcnRpbmcgd2l0aCBcImh0dHA6Ly9cIiwgXCJodHRwczovL1wiIG9yIFwiLy9cIlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNIVFRQUHJvdG9jb2wodXJpOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIC9eKGh0dHBzPzopP1xcL1xcLy8udGVzdCh1cmkpO1xufVxuXG4vKipcbiAqIEFwcGx5IHdoaXRlc3BhY2VzIGJhc2VkIG9uIHRoZSBsZW5ndGhcbiAqIEBwYXJhbSB7Kn0gc3RyIHRoZSBsb2cgbWVzc2FnZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFkKHN0ciwgbWF4KTogc3RyaW5nIHtcbiAgaWYgKHN0ci5sZW5ndGggPCBtYXgpIHtcbiAgICByZXR1cm4gc3RyICsgJyAnLnJlcGVhdChtYXggLSBzdHIubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIHJldHVybiBhIG1hc3F1ZXJhZGUgc3RyaW5nIHdpdGggaXRzIGZpcnN0IGFuZCBsYXN0IHtjaGFyTnVtfSBhbmQgdGhyZWUgZG90cyBpbiBiZXR3ZWVuLlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJOdW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXNrKHN0cjogc3RyaW5nLCBjaGFyTnVtID0gMyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtzdHIuc3Vic3RyKDAsIGNoYXJOdW0pfS4uLiR7c3RyLnN1YnN0cigtY2hhck51bSl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVNjb3BlZFVyaShwYWNrYWdlTmFtZSk6IHN0cmluZyB7XG4gIHJldHVybiBwYWNrYWdlTmFtZS5yZXBsYWNlKC9cXC8vZywgJyUyZicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRGlmZk9uZUtleSh2ZXJzaW9ucyk6IGJvb2xlYW4ge1xuICByZXR1cm4gT2JqZWN0LmtleXModmVyc2lvbnMpLmxlbmd0aCAhPT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmVyc2lvblZhbGlkKHBhY2thZ2VNZXRhLCBwYWNrYWdlVmVyc2lvbik6IGJvb2xlYW4ge1xuICBjb25zdCBoYXNWZXJzaW9uID0gdHlwZW9mIHBhY2thZ2VWZXJzaW9uICE9PSAndW5kZWZpbmVkJztcbiAgaWYgKCFoYXNWZXJzaW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaGFzTWF0Y2hWZXJzaW9uID0gT2JqZWN0LmtleXMocGFja2FnZU1ldGEudmVyc2lvbnMpLmluY2x1ZGVzKHBhY2thZ2VWZXJzaW9uKTtcbiAgcmV0dXJuIGhhc01hdGNoVmVyc2lvbjtcbn1cbiJdfQ==