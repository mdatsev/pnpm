"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../../lib/constants");

var _utils = require("../../../../lib/utils");

var _authUtils = require("../../../../lib/auth-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth) {
  function buildProfile(name) {
    return {
      tfa: false,
      name,
      email: '',
      email_verified: false,
      created: '',
      updated: '',
      cidr_whitelist: null,
      fullname: ''
    };
  }

  route.get('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name) === false) {
      return next(buildProfile(req.remote_user.name));
    }

    res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
    return next({
      message: _constants.API_ERROR.MUST_BE_LOGGED
    });
  });
  route.post('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }

    const {
      password,
      tfa
    } = req.body;
    const {
      name
    } = req.remote_user;

    if (_lodash.default.isNil(password) === false) {
      if ((0, _authUtils.validatePassword)(password.new) === false) {
        /* eslint new-cap:off */
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.PASSWORD_SHORT()));
        /* eslint new-cap:off */
      }

      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNull(err) === false) {
          return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
        }

        if (isUpdated) {
          return next(buildProfile(req.remote_user.name));
        } else {
          return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
        }
      });
    } else if (_lodash.default.isNil(tfa) === false) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.SERVICE_UNAVAILABLE, _constants.SUPPORT_ERRORS.TFA_DISABLED));
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, _constants.APP_ERROR.PROFILE_ERROR));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3YxL3Byb2ZpbGUudHMiXSwibmFtZXMiOlsicm91dGUiLCJhdXRoIiwiYnVpbGRQcm9maWxlIiwibmFtZSIsInRmYSIsImVtYWlsIiwiZW1haWxfdmVyaWZpZWQiLCJjcmVhdGVkIiwidXBkYXRlZCIsImNpZHJfd2hpdGVsaXN0IiwiZnVsbG5hbWUiLCJnZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiXyIsImlzTmlsIiwicmVtb3RlX3VzZXIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIlVOQVVUSE9SSVpFRCIsIm1lc3NhZ2UiLCJBUElfRVJST1IiLCJNVVNUX0JFX0xPR0dFRCIsInBvc3QiLCJwYXNzd29yZCIsImJvZHkiLCJuZXciLCJFcnJvckNvZGUiLCJnZXRDb2RlIiwiUEFTU1dPUkRfU0hPUlQiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZCIsImVyciIsImlzVXBkYXRlZCIsImlzTnVsbCIsImdldENvbmZsaWN0IiwiZ2V0SW50ZXJuYWxFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJTVVBQT1JUX0VSUk9SUyIsIlRGQV9ESVNBQkxFRCIsIklOVEVSTkFMX0VSUk9SIiwiQVBQX0VSUk9SIiwiUFJPRklMRV9FUlJPUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBZ0JlLGtCQUFTQSxLQUFULEVBQXdCQyxJQUF4QixFQUEyQztBQUN4RCxXQUFTQyxZQUFULENBQXNCQyxJQUF0QixFQUE2QztBQUMzQyxXQUFPO0FBQ0xDLE1BQUFBLEdBQUcsRUFBRSxLQURBO0FBRUxELE1BQUFBLElBRks7QUFHTEUsTUFBQUEsS0FBSyxFQUFFLEVBSEY7QUFJTEMsTUFBQUEsY0FBYyxFQUFFLEtBSlg7QUFLTEMsTUFBQUEsT0FBTyxFQUFFLEVBTEo7QUFNTEMsTUFBQUEsT0FBTyxFQUFFLEVBTko7QUFPTEMsTUFBQUEsY0FBYyxFQUFFLElBUFg7QUFRTEMsTUFBQUEsUUFBUSxFQUFFO0FBUkwsS0FBUDtBQVVEOztBQUVEVixFQUFBQSxLQUFLLENBQUNXLEdBQU4sQ0FBVSxnQkFBVixFQUE0QixVQUFTQyxHQUFULEVBQThCQyxHQUE5QixFQUE2Q0MsSUFBN0MsRUFBMkU7QUFDckcsUUFBSUMsZ0JBQUVDLEtBQUYsQ0FBUUosR0FBRyxDQUFDSyxXQUFKLENBQWdCZCxJQUF4QixNQUFrQyxLQUF0QyxFQUE2QztBQUMzQyxhQUFPVyxJQUFJLENBQUNaLFlBQVksQ0FBQ1UsR0FBRyxDQUFDSyxXQUFKLENBQWdCZCxJQUFqQixDQUFiLENBQVg7QUFDRDs7QUFFRFUsSUFBQUEsR0FBRyxDQUFDSyxNQUFKLENBQVdDLHVCQUFZQyxZQUF2QjtBQUNBLFdBQU9OLElBQUksQ0FBQztBQUNWTyxNQUFBQSxPQUFPLEVBQUVDLHFCQUFVQztBQURULEtBQUQsQ0FBWDtBQUdELEdBVEQ7QUFXQXZCLEVBQUFBLEtBQUssQ0FBQ3dCLElBQU4sQ0FBVyxnQkFBWCxFQUE2QixVQUFTWixHQUFULEVBQThCQyxHQUE5QixFQUE2Q0MsSUFBN0MsRUFBMkU7QUFDdEcsUUFBSUMsZ0JBQUVDLEtBQUYsQ0FBUUosR0FBRyxDQUFDSyxXQUFKLENBQWdCZCxJQUF4QixDQUFKLEVBQW1DO0FBQ2pDVSxNQUFBQSxHQUFHLENBQUNLLE1BQUosQ0FBV0MsdUJBQVlDLFlBQXZCO0FBQ0EsYUFBT04sSUFBSSxDQUFDO0FBQ1ZPLFFBQUFBLE9BQU8sRUFBRUMscUJBQVVDO0FBRFQsT0FBRCxDQUFYO0FBR0Q7O0FBRUQsVUFBTTtBQUFFRSxNQUFBQSxRQUFGO0FBQVlyQixNQUFBQTtBQUFaLFFBQW9CUSxHQUFHLENBQUNjLElBQTlCO0FBQ0EsVUFBTTtBQUFFdkIsTUFBQUE7QUFBRixRQUFXUyxHQUFHLENBQUNLLFdBQXJCOztBQUVBLFFBQUlGLGdCQUFFQyxLQUFGLENBQVFTLFFBQVIsTUFBc0IsS0FBMUIsRUFBaUM7QUFDL0IsVUFBSSxpQ0FBaUJBLFFBQVEsQ0FBQ0UsR0FBMUIsTUFBbUMsS0FBdkMsRUFBOEM7QUFDNUM7QUFDQSxlQUFPYixJQUFJLENBQUNjLGlCQUFVQyxPQUFWLENBQWtCVix1QkFBWUMsWUFBOUIsRUFBNENFLHFCQUFVUSxjQUFWLEVBQTVDLENBQUQsQ0FBWDtBQUNBO0FBQ0Q7O0FBRUQ3QixNQUFBQSxJQUFJLENBQUM4QixjQUFMLENBQ0U1QixJQURGLEVBRUVzQixRQUFRLENBQUNPLEdBRlgsRUFHRVAsUUFBUSxDQUFDRSxHQUhYLEVBSUUsQ0FBQ00sR0FBRCxFQUFNQyxTQUFOLEtBQXNDO0FBQ3BDLFlBQUluQixnQkFBRW9CLE1BQUYsQ0FBU0YsR0FBVCxNQUFrQixLQUF0QixFQUE2QjtBQUMzQixpQkFBT25CLElBQUksQ0FBQ2MsaUJBQVVDLE9BQVYsQ0FBa0JJLEdBQUcsQ0FBQ2YsTUFBdEIsRUFBOEJlLEdBQUcsQ0FBQ1osT0FBbEMsS0FBOENPLGlCQUFVUSxXQUFWLENBQXNCSCxHQUFHLENBQUNaLE9BQTFCLENBQS9DLENBQVg7QUFDRDs7QUFFRCxZQUFJYSxTQUFKLEVBQWU7QUFDYixpQkFBT3BCLElBQUksQ0FBQ1osWUFBWSxDQUFDVSxHQUFHLENBQUNLLFdBQUosQ0FBZ0JkLElBQWpCLENBQWIsQ0FBWDtBQUNELFNBRkQsTUFFTztBQUNMLGlCQUFPVyxJQUFJLENBQUNjLGlCQUFVUyxnQkFBVixDQUEyQmYscUJBQVVnQixxQkFBckMsQ0FBRCxDQUFYO0FBQ0Q7QUFDRixPQWRIO0FBZ0JELEtBdkJELE1BdUJPLElBQUl2QixnQkFBRUMsS0FBRixDQUFRWixHQUFSLE1BQWlCLEtBQXJCLEVBQTRCO0FBQ2pDLGFBQU9VLElBQUksQ0FBQ2MsaUJBQVVDLE9BQVYsQ0FBa0JWLHVCQUFZb0IsbUJBQTlCLEVBQW1EQywwQkFBZUMsWUFBbEUsQ0FBRCxDQUFYO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBTzNCLElBQUksQ0FBQ2MsaUJBQVVDLE9BQVYsQ0FBa0JWLHVCQUFZdUIsY0FBOUIsRUFBOENDLHFCQUFVQyxhQUF4RCxDQUFELENBQVg7QUFDRDtBQUNGLEdBdkNEO0FBd0NEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgQVBQX0VSUk9SLCBIVFRQX1NUQVRVUywgU1VQUE9SVF9FUlJPUlMgfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyB2YWxpZGF0ZVBhc3N3b3JkIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL2F1dGgtdXRpbHMnO1xuXG5pbXBvcnQgeyBSZXNwb25zZSwgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgSUF1dGggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZmlsZSB7XG4gIHRmYTogYm9vbGVhbjtcbiAgbmFtZTogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICBlbWFpbF92ZXJpZmllZDogYm9vbGVhbjtcbiAgY3JlYXRlZDogc3RyaW5nO1xuICB1cGRhdGVkOiBzdHJpbmc7XG4gIGNpZHJfd2hpdGVsaXN0OiBzdHJpbmdbXSB8IG51bGw7XG4gIGZ1bGxuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJvdXRlOiBSb3V0ZXIsIGF1dGg6IElBdXRoKTogdm9pZCB7XG4gIGZ1bmN0aW9uIGJ1aWxkUHJvZmlsZShuYW1lOiBzdHJpbmcpOiBQcm9maWxlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGZhOiBmYWxzZSxcbiAgICAgIG5hbWUsXG4gICAgICBlbWFpbDogJycsXG4gICAgICBlbWFpbF92ZXJpZmllZDogZmFsc2UsXG4gICAgICBjcmVhdGVkOiAnJyxcbiAgICAgIHVwZGF0ZWQ6ICcnLFxuICAgICAgY2lkcl93aGl0ZWxpc3Q6IG51bGwsXG4gICAgICBmdWxsbmFtZTogJycsXG4gICAgfTtcbiAgfVxuXG4gIHJvdXRlLmdldCgnLy0vbnBtL3YxL3VzZXInLCBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgaWYgKF8uaXNOaWwocmVxLnJlbW90ZV91c2VyLm5hbWUpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIG5leHQoYnVpbGRQcm9maWxlKHJlcS5yZW1vdGVfdXNlci5uYW1lKSk7XG4gICAgfVxuXG4gICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQpO1xuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcm91dGUucG9zdCgnLy0vbnBtL3YxL3VzZXInLCBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgaWYgKF8uaXNOaWwocmVxLnJlbW90ZV91c2VyLm5hbWUpKSB7XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcGFzc3dvcmQsIHRmYSB9ID0gcmVxLmJvZHk7XG4gICAgY29uc3QgeyBuYW1lIH0gPSByZXEucmVtb3RlX3VzZXI7XG5cbiAgICBpZiAoXy5pc05pbChwYXNzd29yZCkgPT09IGZhbHNlKSB7XG4gICAgICBpZiAodmFsaWRhdGVQYXNzd29yZChwYXNzd29yZC5uZXcpID09PSBmYWxzZSkge1xuICAgICAgICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVELCBBUElfRVJST1IuUEFTU1dPUkRfU0hPUlQoKSkpO1xuICAgICAgICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgICAgIH1cblxuICAgICAgYXV0aC5jaGFuZ2VQYXNzd29yZChcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcGFzc3dvcmQub2xkLFxuICAgICAgICBwYXNzd29yZC5uZXcsXG4gICAgICAgIChlcnIsIGlzVXBkYXRlZCk6ICROZXh0RnVuY3Rpb25WZXIgPT4ge1xuICAgICAgICAgIGlmIChfLmlzTnVsbChlcnIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldENvZGUoZXJyLnN0YXR1cywgZXJyLm1lc3NhZ2UpIHx8IEVycm9yQ29kZS5nZXRDb25mbGljdChlcnIubWVzc2FnZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGJ1aWxkUHJvZmlsZShyZXEucmVtb3RlX3VzZXIubmFtZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0SW50ZXJuYWxFcnJvcihBUElfRVJST1IuSU5URVJOQUxfU0VSVkVSX0VSUk9SKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoXy5pc05pbCh0ZmEpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuU0VSVklDRV9VTkFWQUlMQUJMRSwgU1VQUE9SVF9FUlJPUlMuVEZBX0RJU0FCTEVEKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLklOVEVSTkFMX0VSUk9SLCBBUFBfRVJST1IuUFJPRklMRV9FUlJPUikpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=