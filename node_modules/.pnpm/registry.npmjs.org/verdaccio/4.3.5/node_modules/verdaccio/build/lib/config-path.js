"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _logger = require("./logger");

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _utils = require("./utils");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONFIG_FILE = 'config.yaml';
const XDG = 'xdg';
const WIN = 'win';
const WIN32 = 'win32'; // eslint-disable-next-line

const pkgJSON = require('../../package.json');

/**
 * Find and get the first config file that match.
 * @return {String} the config file path
 */
function findConfigFile(configPath) {
  if (_lodash.default.isNil(configPath) === false) {
    return _path.default.resolve(configPath);
  }

  const configPaths = getConfigPaths();

  if (_lodash.default.isEmpty(configPaths)) {
    throw new Error('no configuration files can be processed');
  }

  const primaryConf = _lodash.default.find(configPaths, configLocation => (0, _utils.fileExists)(configLocation.path));

  if (_lodash.default.isNil(primaryConf) === false) {
    return primaryConf.path;
  }

  return createConfigFile(_lodash.default.head(configPaths)).path;
}

function createConfigFile(configLocation) {
  createConfigFolder(configLocation);
  const defaultConfig = updateStorageLinks(configLocation, readDefaultConfig());

  _fs.default.writeFileSync(configLocation.path, defaultConfig);

  return configLocation;
}

function readDefaultConfig() {
  return _fs.default.readFileSync(require.resolve('../../conf/default.yaml'), _constants.CHARACTER_ENCODING.UTF8);
}

function createConfigFolder(configLocation) {
  _mkdirp.default.sync(_path.default.dirname(configLocation.path));

  _logger.logger.info({
    file: configLocation.path
  }, 'Creating default config file in @{file}');
}

function updateStorageLinks(configLocation, defaultConfig) {
  if (configLocation.type !== XDG) {
    return defaultConfig;
  } // $XDG_DATA_HOME defines the base directory relative to which user specific data files should be stored,
  // If $XDG_DATA_HOME is either not set or empty, a default equal to $HOME/.local/share should be used.
  // $FlowFixMe


  let dataDir = process.env.XDG_DATA_HOME || _path.default.join(process.env.HOME, '.local', 'share');

  if ((0, _utils.folderExists)(dataDir)) {
    dataDir = _path.default.resolve(_path.default.join(dataDir, pkgJSON.name, 'storage'));
    return defaultConfig.replace(/^storage: .\/storage$/m, `storage: ${dataDir}`);
  } else {
    return defaultConfig;
  }
}

function getConfigPaths() {
  const listPaths = [getXDGDirectory(), getWindowsDirectory(), getRelativeDefaultDirectory(), getOldDirectory()].reduce(function (acc, currentValue) {
    if (_lodash.default.isUndefined(currentValue) === false) {
      acc.push(currentValue);
    }

    return acc;
  }, []);
  return listPaths;
}

const getXDGDirectory = () => {
  const XDGConfig = getXDGHome() || process.env.HOME && _path.default.join(process.env.HOME, '.config');

  if (XDGConfig && (0, _utils.folderExists)(XDGConfig)) {
    return {
      path: _path.default.join(XDGConfig, pkgJSON.name, CONFIG_FILE),
      type: XDG
    };
  }
};

const getXDGHome = () => process.env.XDG_CONFIG_HOME;

const getWindowsDirectory = () => {
  if (process.platform === WIN32 && process.env.APPDATA && (0, _utils.folderExists)(process.env.APPDATA)) {
    return {
      path: _path.default.resolve(_path.default.join(process.env.APPDATA, pkgJSON.name, CONFIG_FILE)),
      type: WIN
    };
  }
};

const getRelativeDefaultDirectory = () => {
  return {
    path: _path.default.resolve(_path.default.join('.', pkgJSON.name, CONFIG_FILE)),
    type: 'def'
  };
};

const getOldDirectory = () => {
  return {
    path: _path.default.resolve(_path.default.join('.', CONFIG_FILE)),
    type: 'old'
  };
};

var _default = findConfigFile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29uZmlnLXBhdGgudHMiXSwibmFtZXMiOlsiQ09ORklHX0ZJTEUiLCJYREciLCJXSU4iLCJXSU4zMiIsInBrZ0pTT04iLCJyZXF1aXJlIiwiZmluZENvbmZpZ0ZpbGUiLCJjb25maWdQYXRoIiwiXyIsImlzTmlsIiwiUGF0aCIsInJlc29sdmUiLCJjb25maWdQYXRocyIsImdldENvbmZpZ1BhdGhzIiwiaXNFbXB0eSIsIkVycm9yIiwicHJpbWFyeUNvbmYiLCJmaW5kIiwiY29uZmlnTG9jYXRpb24iLCJwYXRoIiwiY3JlYXRlQ29uZmlnRmlsZSIsImhlYWQiLCJjcmVhdGVDb25maWdGb2xkZXIiLCJkZWZhdWx0Q29uZmlnIiwidXBkYXRlU3RvcmFnZUxpbmtzIiwicmVhZERlZmF1bHRDb25maWciLCJmcyIsIndyaXRlRmlsZVN5bmMiLCJyZWFkRmlsZVN5bmMiLCJDSEFSQUNURVJfRU5DT0RJTkciLCJVVEY4IiwibWtkaXJwIiwic3luYyIsImRpcm5hbWUiLCJsb2dnZXIiLCJpbmZvIiwiZmlsZSIsInR5cGUiLCJkYXRhRGlyIiwicHJvY2VzcyIsImVudiIsIlhER19EQVRBX0hPTUUiLCJqb2luIiwiSE9NRSIsIm5hbWUiLCJyZXBsYWNlIiwibGlzdFBhdGhzIiwiZ2V0WERHRGlyZWN0b3J5IiwiZ2V0V2luZG93c0RpcmVjdG9yeSIsImdldFJlbGF0aXZlRGVmYXVsdERpcmVjdG9yeSIsImdldE9sZERpcmVjdG9yeSIsInJlZHVjZSIsImFjYyIsImN1cnJlbnRWYWx1ZSIsImlzVW5kZWZpbmVkIiwicHVzaCIsIlhER0NvbmZpZyIsImdldFhER0hvbWUiLCJYREdfQ09ORklHX0hPTUUiLCJwbGF0Zm9ybSIsIkFQUERBVEEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLFdBQVcsR0FBRyxhQUFwQjtBQUNBLE1BQU1DLEdBQUcsR0FBRyxLQUFa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QUFDQyxHQUFSLENBQVlvQixPQUF0QixFQUErQnhELE9BQU8sQ0FBQ3dDLElBQXZDLEVBQTZDNUMsV0FBN0MsQ0FBYixDQUREO0FBRUxxQyxNQUFBQSxJQUFJLEVBQUVuQztBQUZELEtBQVA7QUFJRDtBQUNGLENBUEQ7O0FBU0EsTUFBTStDLDJCQUEyQixHQUFHLE1BQXNCO0FBQ3hELFNBQU87QUFDTDlCLElBQUFBLElBQUksRUFBRVQsY0FBS0MsT0FBTCxDQUFhRCxjQUFLZ0MsSUFBTCxDQUFVLEdBQVYsRUFBZXRDLE9BQU8sQ0FBQ3dDLElBQXZCLEVBQTZCNUMsV0FBN0IsQ0FBYixDQUREO0FBRUxxQyxJQUFBQSxJQUFJLEVBQUU7QUFGRCxHQUFQO0FBSUQsQ0FMRDs7QUFPQSxNQUFNYSxlQUFlLEdBQUcsTUFBc0I7QUFDNUMsU0FBTztBQUNML0IsSUFBQUEsSUFBSSxFQUFFVCxjQUFLQyxPQUFMLENBQWFELGNBQUtnQyxJQUFMLENBQVUsR0FBVixFQUFlMUMsV0FBZixDQUFiLENBREQ7QUFFTHFDLElBQUFBLElBQUksRUFBRTtBQUZELEdBQVA7QUFJRCxDQUxEOztlQU9lL0IsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgbWtkaXJwIGZyb20gJ21rZGlycCc7XG5cbmltcG9ydCB7IGZvbGRlckV4aXN0cywgZmlsZUV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgQ0hBUkFDVEVSX0VOQ09ESU5HIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBDT05GSUdfRklMRSA9ICdjb25maWcueWFtbCc7XG5jb25zdCBYREcgPSAneGRnJztcbmNvbnN0IFdJTiA9ICd3aW4nO1xuY29uc3QgV0lOMzIgPSAnd2luMzInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBwa2dKU09OID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5cbmV4cG9ydCB0eXBlIFNldHVwRGlyZWN0b3J5ID0ge1xuICBwYXRoOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZ1xufTtcblxuLyoqXG4gKiBGaW5kIGFuZCBnZXQgdGhlIGZpcnN0IGNvbmZpZyBmaWxlIHRoYXQgbWF0Y2guXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBjb25maWcgZmlsZSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGZpbmRDb25maWdGaWxlKGNvbmZpZ1BhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChfLmlzTmlsKGNvbmZpZ1BhdGgpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBQYXRoLnJlc29sdmUoY29uZmlnUGF0aCk7XG4gIH1cblxuICBjb25zdCBjb25maWdQYXRoczogU2V0dXBEaXJlY3RvcnlbXSA9IGdldENvbmZpZ1BhdGhzKCk7XG5cbiAgaWYgKF8uaXNFbXB0eShjb25maWdQYXRocykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGNvbmZpZ3VyYXRpb24gZmlsZXMgY2FuIGJlIHByb2Nlc3NlZCcpO1xuICB9XG5cbiAgY29uc3QgcHJpbWFyeUNvbmY6IGFueSA9IF8uZmluZChjb25maWdQYXRocywgKGNvbmZpZ0xvY2F0aW9uOiBhbnkpID0+IGZpbGVFeGlzdHMoY29uZmlnTG9jYXRpb24ucGF0aCkpO1xuICBpZiAoXy5pc05pbChwcmltYXJ5Q29uZikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHByaW1hcnlDb25mLnBhdGg7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ29uZmlnRmlsZShfLmhlYWQoY29uZmlnUGF0aHMpKS5wYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb25maWdGaWxlKGNvbmZpZ0xvY2F0aW9uOiBhbnkpOiBTZXR1cERpcmVjdG9yeSB7XG4gIGNyZWF0ZUNvbmZpZ0ZvbGRlcihjb25maWdMb2NhdGlvbik7XG5cbiAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHVwZGF0ZVN0b3JhZ2VMaW5rcyhjb25maWdMb2NhdGlvbiwgcmVhZERlZmF1bHRDb25maWcoKSk7XG5cbiAgZnMud3JpdGVGaWxlU3luYyhjb25maWdMb2NhdGlvbi5wYXRoLCBkZWZhdWx0Q29uZmlnKTtcblxuICByZXR1cm4gY29uZmlnTG9jYXRpb247XG59XG5cbmZ1bmN0aW9uIHJlYWREZWZhdWx0Q29uZmlnKCk6IHN0cmluZyB7XG4gIHJldHVybiBmcy5yZWFkRmlsZVN5bmMocmVxdWlyZS5yZXNvbHZlKCcuLi8uLi9jb25mL2RlZmF1bHQueWFtbCcpLCBDSEFSQUNURVJfRU5DT0RJTkcuVVRGOCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbmZpZ0ZvbGRlcihjb25maWdMb2NhdGlvbik6IHZvaWQge1xuICBta2RpcnAuc3luYyhQYXRoLmRpcm5hbWUoY29uZmlnTG9jYXRpb24ucGF0aCkpO1xuICBsb2dnZXIuaW5mbyh7IGZpbGU6IGNvbmZpZ0xvY2F0aW9uLnBhdGggfSwgJ0NyZWF0aW5nIGRlZmF1bHQgY29uZmlnIGZpbGUgaW4gQHtmaWxlfScpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdG9yYWdlTGlua3MoY29uZmlnTG9jYXRpb24sIGRlZmF1bHRDb25maWcpOiBzdHJpbmcge1xuICBpZiAoY29uZmlnTG9jYXRpb24udHlwZSAhPT0gWERHKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDb25maWc7XG4gIH1cblxuICAvLyAkWERHX0RBVEFfSE9NRSBkZWZpbmVzIHRoZSBiYXNlIGRpcmVjdG9yeSByZWxhdGl2ZSB0byB3aGljaCB1c2VyIHNwZWNpZmljIGRhdGEgZmlsZXMgc2hvdWxkIGJlIHN0b3JlZCxcbiAgLy8gSWYgJFhER19EQVRBX0hPTUUgaXMgZWl0aGVyIG5vdCBzZXQgb3IgZW1wdHksIGEgZGVmYXVsdCBlcXVhbCB0byAkSE9NRS8ubG9jYWwvc2hhcmUgc2hvdWxkIGJlIHVzZWQuXG4gIC8vICRGbG93Rml4TWVcbiAgbGV0IGRhdGFEaXIgPSBwcm9jZXNzLmVudi5YREdfREFUQV9IT01FIHx8IFBhdGguam9pbihwcm9jZXNzLmVudi5IT01FIGFzIHN0cmluZywgJy5sb2NhbCcsICdzaGFyZScpO1xuICBpZiAoZm9sZGVyRXhpc3RzKGRhdGFEaXIpKSB7XG4gICAgZGF0YURpciA9IFBhdGgucmVzb2x2ZShQYXRoLmpvaW4oZGF0YURpciwgcGtnSlNPTi5uYW1lLCAnc3RvcmFnZScpKTtcbiAgICByZXR1cm4gZGVmYXVsdENvbmZpZy5yZXBsYWNlKC9ec3RvcmFnZTogLlxcL3N0b3JhZ2UkL20sIGBzdG9yYWdlOiAke2RhdGFEaXJ9YCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDb25maWc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnUGF0aHMoKTogU2V0dXBEaXJlY3RvcnlbXSB7XG4gIGNvbnN0IGxpc3RQYXRoczogU2V0dXBEaXJlY3RvcnlbXSA9IFtnZXRYREdEaXJlY3RvcnkoKSwgZ2V0V2luZG93c0RpcmVjdG9yeSgpLCBnZXRSZWxhdGl2ZURlZmF1bHREaXJlY3RvcnkoKSwgZ2V0T2xkRGlyZWN0b3J5KCldLnJlZHVjZShcbiAgICBmdW5jdGlvbihhY2MsIGN1cnJlbnRWYWx1ZTogYW55KTogU2V0dXBEaXJlY3RvcnlbXSB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChjdXJyZW50VmFsdWUpID09PSBmYWxzZSkge1xuICAgICAgICBhY2MucHVzaChjdXJyZW50VmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSBhcyBTZXR1cERpcmVjdG9yeVtdKTtcblxuICByZXR1cm4gbGlzdFBhdGhzO1xufVxuXG5jb25zdCBnZXRYREdEaXJlY3RvcnkgPSAoKTogU2V0dXBEaXJlY3RvcnkgfCB2b2lkID0+IHtcbiAgY29uc3QgWERHQ29uZmlnID0gZ2V0WERHSG9tZSgpIHx8IChwcm9jZXNzLmVudi5IT01FICYmIFBhdGguam9pbihwcm9jZXNzLmVudi5IT01FLCAnLmNvbmZpZycpKTtcblxuICBpZiAoWERHQ29uZmlnICYmIGZvbGRlckV4aXN0cyhYREdDb25maWcpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFBhdGguam9pbihYREdDb25maWcsIHBrZ0pTT04ubmFtZSwgQ09ORklHX0ZJTEUpLFxuICAgICAgdHlwZTogWERHLFxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IGdldFhER0hvbWUgPSAoKTogc3RyaW5nIHwgdm9pZCA9PiBwcm9jZXNzLmVudi5YREdfQ09ORklHX0hPTUU7XG5cbmNvbnN0IGdldFdpbmRvd3NEaXJlY3RvcnkgPSAoKTogU2V0dXBEaXJlY3RvcnkgfCB2b2lkID0+IHtcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09IFdJTjMyICYmIHByb2Nlc3MuZW52LkFQUERBVEEgJiYgZm9sZGVyRXhpc3RzKHByb2Nlc3MuZW52LkFQUERBVEEpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFBhdGgucmVzb2x2ZShQYXRoLmpvaW4ocHJvY2Vzcy5lbnYuQVBQREFUQSwgcGtnSlNPTi5uYW1lLCBDT05GSUdfRklMRSkpLFxuICAgICAgdHlwZTogV0lOLFxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IGdldFJlbGF0aXZlRGVmYXVsdERpcmVjdG9yeSA9ICgpOiBTZXR1cERpcmVjdG9yeSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogUGF0aC5yZXNvbHZlKFBhdGguam9pbignLicsIHBrZ0pTT04ubmFtZSwgQ09ORklHX0ZJTEUpKSxcbiAgICB0eXBlOiAnZGVmJyxcbiAgfTtcbn07XG5cbmNvbnN0IGdldE9sZERpcmVjdG9yeSA9ICgpOiBTZXR1cERpcmVjdG9yeSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogUGF0aC5yZXNvbHZlKFBhdGguam9pbignLicsIENPTkZJR19GSUxFKSksXG4gICAgdHlwZTogJ29sZCcsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmaW5kQ29uZmlnRmlsZTtcbiJdfQ==