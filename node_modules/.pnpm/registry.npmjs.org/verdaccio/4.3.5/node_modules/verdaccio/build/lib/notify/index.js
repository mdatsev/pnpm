"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleNotify = handleNotify;
exports.sendNotification = sendNotification;
exports.notify = notify;

var _handlebars = _interopRequireDefault(require("handlebars"));

var _lodash = _interopRequireDefault(require("lodash"));

var _notifyRequest = require("./notify-request");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function handleNotify(metadata, notifyEntry, remoteUser, publishedPackage) {
  let regex;

  if (metadata.name && notifyEntry.packagePattern) {
    regex = new RegExp(notifyEntry.packagePattern, notifyEntry.packagePatternFlags || '');

    if (!regex.test(metadata.name)) {
      return;
    }
  }

  const template = _handlebars.default.compile(notifyEntry.content); // don't override 'publisher' if package.json already has that

  /* eslint no-unused-vars: 0 */

  /* eslint @typescript-eslint/no-unused-vars: 0 */
  // @ts-ignore


  if (_lodash.default.isNil(metadata.publisher)) {
    // @ts-ignore
    metadata = _objectSpread({}, metadata, {
      publishedPackage,
      publisher: {
        name: remoteUser.name
      }
    });
  }

  const content = template(metadata);
  const options = {
    body: content,
    url: ''
  }; // provides fallback support, it's accept an Object {} and Array of {}

  if (notifyEntry.headers && _lodash.default.isArray(notifyEntry.headers)) {
    const header = {};
    notifyEntry.headers.map(function (item) {
      if (Object.is(item, item)) {
        for (const key in item) {
          if (item.hasOwnProperty(key)) {
            header[key] = item[key];
          }
        }
      }
    });
    options.headers = header;
  } else if (Object.is(notifyEntry.headers, notifyEntry.headers)) {
    options.headers = notifyEntry.headers;
  }

  options.method = notifyEntry.method;

  if (notifyEntry.endpoint) {
    options.url = notifyEntry.endpoint;
  }

  return (0, _notifyRequest.notifyRequest)(options, content);
}

function sendNotification(metadata, notify, remoteUser, publishedPackage) {
  return handleNotify(metadata, notify, remoteUser, publishedPackage);
}

function notify(metadata, config, remoteUser, publishedPackage) {
  if (config.notify) {
    if (config.notify.content) {
      return sendNotification(metadata, config.notify, remoteUser, publishedPackage);
    } else {
      // multiple notifications endpoints PR #108
      return Promise.all(_lodash.default.map(config.notify, key => sendNotification(metadata, key, remoteUser, publishedPackage)));
    }
  }

  return Promise.resolve();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbm90aWZ5L2luZGV4LnRzIl0sIm5hbWVzIjpbImhhbmRsZU5vdGlmeSIsIm1ldGFkYXRhIiwibm90aWZ5RW50cnkiLCJyZW1vdGVVc2VyIiwicHVibGlzaGVkUGFja2FnZSIsInJlZ2V4IiwibmFtZSIsInBhY2thZ2VQYXR0ZXJuIiwiUmVnRXhwIiwicGFja2FnZVBhdHRlcm5GbGFncyIsInRlc3QiLCJ0ZW1wbGF0ZSIsIkhhbmRsZWJhcnMiLCJjb21waWxlIiwiY29udGVudCIsIl8iLCJpc05pbCIsInB1Ymxpc2hlciIsIm9wdGlvbnMiLCJib2R5IiwidXJsIiwiaGVhZGVycyIsImlzQXJyYXkiLCJoZWFkZXIiLCJtYXAiLCJpdGVtIiwiT2JqZWN0IiwiaXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1ldGhvZCIsImVuZHBvaW50Iiwic2VuZE5vdGlmaWNhdGlvbiIsIm5vdGlmeSIsImNvbmZpZyIsIlByb21pc2UiLCJhbGwiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7OztBQU1PLFNBQVNBLFlBQVQsQ0FBc0JDLFFBQXRCLEVBQXlDQyxXQUF6QyxFQUFzREMsVUFBdEQsRUFBOEVDLGdCQUE5RSxFQUE2SDtBQUNsSSxNQUFJQyxLQUFKOztBQUNBLE1BQUlKLFFBQVEsQ0FBQ0ssSUFBVCxJQUFpQkosV0FBVyxDQUFDSyxjQUFqQyxFQUFpRDtBQUMvQ0YsSUFBQUEsS0FBSyxHQUFHLElBQUlHLE1BQUosQ0FBV04sV0FBVyxDQUFDSyxjQUF2QixFQUF1Q0wsV0FBVyxDQUFDTyxtQkFBWixJQUFtQyxFQUExRSxDQUFSOztBQUNBLFFBQUksQ0FBQ0osS0FBSyxDQUFDSyxJQUFOLENBQVdULFFBQVEsQ0FBQ0ssSUFBcEIsQ0FBTCxFQUFnQztBQUM5QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUssUUFBb0MsR0FBR0Msb0JBQVdDLE9BQVgsQ0FBbUJYLFdBQVcsQ0FBQ1ksT0FBL0IsQ0FBN0MsQ0FUa0ksQ0FVbEk7O0FBQ0E7O0FBQ0E7QUFDQTs7O0FBQ0EsTUFBSUMsZ0JBQUVDLEtBQUYsQ0FBUWYsUUFBUSxDQUFDZ0IsU0FBakIsQ0FBSixFQUFpQztBQUMvQjtBQUNBaEIsSUFBQUEsUUFBUSxxQkFBUUEsUUFBUjtBQUFrQkcsTUFBQUEsZ0JBQWxCO0FBQW9DYSxNQUFBQSxTQUFTLEVBQUU7QUFBRVgsUUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHO0FBQW5CO0FBQS9DLE1BQVI7QUFDRDs7QUFFRCxRQUFNUSxPQUFlLEdBQUdILFFBQVEsQ0FBQ1YsUUFBRCxDQUFoQztBQUVBLFFBQU1pQixPQUF1QixHQUFHO0FBQzlCQyxJQUFBQSxJQUFJLEVBQUVMLE9BRHdCO0FBRTlCTSxJQUFBQSxHQUFHLEVBQUU7QUFGeUIsR0FBaEMsQ0FyQmtJLENBMEJsSTs7QUFDQSxNQUFJbEIsV0FBVyxDQUFDbUIsT0FBWixJQUF1Qk4sZ0JBQUVPLE9BQUYsQ0FBVXBCLFdBQVcsQ0FBQ21CLE9BQXRCLENBQTNCLEVBQTJEO0FBQ3pELFVBQU1FLE1BQU0sR0FBRyxFQUFmO0FBQ0FyQixJQUFBQSxXQUFXLENBQUNtQixPQUFaLENBQW9CRyxHQUFwQixDQUF3QixVQUFTQyxJQUFULEVBQXFCO0FBQzNDLFVBQUlDLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVRixJQUFWLEVBQWdCQSxJQUFoQixDQUFKLEVBQTJCO0FBQ3pCLGFBQUssTUFBTUcsR0FBWCxJQUFrQkgsSUFBbEIsRUFBd0I7QUFDdEIsY0FBSUEsSUFBSSxDQUFDSSxjQUFMLENBQW9CRCxHQUFwQixDQUFKLEVBQThCO0FBQzVCTCxZQUFBQSxNQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjSCxJQUFJLENBQUNHLEdBQUQsQ0FBbEI7QUFDRDtBQUNGO0FBQ0Y7QUFDRixLQVJEO0FBU0FWLElBQUFBLE9BQU8sQ0FBQ0csT0FBUixHQUFrQkUsTUFBbEI7QUFDRCxHQVpELE1BWU8sSUFBSUcsTUFBTSxDQUFDQyxFQUFQLENBQVV6QixXQUFXLENBQUNtQixPQUF0QixFQUErQm5CLFdBQVcsQ0FBQ21CLE9BQTNDLENBQUosRUFBeUQ7QUFDOURILElBQUFBLE9BQU8sQ0FBQ0csT0FBUixHQUFrQm5CLFdBQVcsQ0FBQ21CLE9BQTlCO0FBQ0Q7O0FBRURILEVBQUFBLE9BQU8sQ0FBQ1ksTUFBUixHQUFpQjVCLFdBQVcsQ0FBQzRCLE1BQTdCOztBQUVBLE1BQUk1QixXQUFXLENBQUM2QixRQUFoQixFQUEwQjtBQUN4QmIsSUFBQUEsT0FBTyxDQUFDRSxHQUFSLEdBQWNsQixXQUFXLENBQUM2QixRQUExQjtBQUNEOztBQUVELFNBQU8sa0NBQWNiLE9BQWQsRUFBdUJKLE9BQXZCLENBQVA7QUFDRDs7QUFFTSxTQUFTa0IsZ0JBQVQsQ0FBMEIvQixRQUExQixFQUE2Q2dDLE1BQTdDLEVBQW1FOUIsVUFBbkUsRUFBMkZDLGdCQUEzRixFQUFtSTtBQUN4SSxTQUFPSixZQUFZLENBQUNDLFFBQUQsRUFBV2dDLE1BQVgsRUFBbUI5QixVQUFuQixFQUErQkMsZ0JBQS9CLENBQW5CO0FBQ0Q7O0FBRU0sU0FBUzZCLE1BQVQsQ0FBZ0JoQyxRQUFoQixFQUFtQ2lDLE1BQW5DLEVBQW1EL0IsVUFBbkQsRUFBMkVDLGdCQUEzRSxFQUEwSDtBQUMvSCxNQUFJOEIsTUFBTSxDQUFDRCxNQUFYLEVBQW1CO0FBQ2pCLFFBQUlDLE1BQU0sQ0FBQ0QsTUFBUCxDQUFjbkIsT0FBbEIsRUFBMkI7QUFDekIsYUFBT2tCLGdCQUFnQixDQUFDL0IsUUFBRCxFQUFZaUMsTUFBTSxDQUFDRCxNQUFuQixFQUF1RDlCLFVBQXZELEVBQW1FQyxnQkFBbkUsQ0FBdkI7QUFDRCxLQUZELE1BRU87QUFDTDtBQUNBLGFBQU8rQixPQUFPLENBQUNDLEdBQVIsQ0FBWXJCLGdCQUFFUyxHQUFGLENBQU1VLE1BQU0sQ0FBQ0QsTUFBYixFQUFxQkwsR0FBRyxJQUFJSSxnQkFBZ0IsQ0FBQy9CLFFBQUQsRUFBVzJCLEdBQVgsRUFBZ0J6QixVQUFoQixFQUE0QkMsZ0JBQTVCLENBQTVDLENBQVosQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTytCLE9BQU8sQ0FBQ0UsT0FBUixFQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IG5vdGlmeVJlcXVlc3QgfSBmcm9tICcuL25vdGlmeS1yZXF1ZXN0JztcbmltcG9ydCB7IE9wdGlvbnNXaXRoVXJsIH0gZnJvbSAncmVxdWVzdCc7XG5pbXBvcnQgeyBDb25maWcsIFBhY2thZ2UsIFJlbW90ZVVzZXIgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxudHlwZSBUZW1wbGF0ZU1ldGFkYXRhID0gUGFja2FnZSAmIHsgcHVibGlzaGVkUGFja2FnZTogc3RyaW5nIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVOb3RpZnkobWV0YWRhdGE6IFBhY2thZ2UsIG5vdGlmeUVudHJ5LCByZW1vdGVVc2VyOiBSZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4gfCB2b2lkIHtcbiAgbGV0IHJlZ2V4O1xuICBpZiAobWV0YWRhdGEubmFtZSAmJiBub3RpZnlFbnRyeS5wYWNrYWdlUGF0dGVybikge1xuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChub3RpZnlFbnRyeS5wYWNrYWdlUGF0dGVybiwgbm90aWZ5RW50cnkucGFja2FnZVBhdHRlcm5GbGFncyB8fCAnJyk7XG4gICAgaWYgKCFyZWdleC50ZXN0KG1ldGFkYXRhLm5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGVtcGxhdGU6IEhhbmRsZWJhcnNUZW1wbGF0ZURlbGVnYXRlID0gSGFuZGxlYmFycy5jb21waWxlKG5vdGlmeUVudHJ5LmNvbnRlbnQpO1xuICAvLyBkb24ndCBvdmVycmlkZSAncHVibGlzaGVyJyBpZiBwYWNrYWdlLmpzb24gYWxyZWFkeSBoYXMgdGhhdFxuICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IDAgKi9cbiAgLyogZXNsaW50IEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyczogMCAqL1xuICAvLyBAdHMtaWdub3JlXG4gIGlmIChfLmlzTmlsKG1ldGFkYXRhLnB1Ymxpc2hlcikpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbWV0YWRhdGEgPSB7IC4uLm1ldGFkYXRhLCBwdWJsaXNoZWRQYWNrYWdlLCBwdWJsaXNoZXI6IHsgbmFtZTogcmVtb3RlVXNlci5uYW1lIGFzIHN0cmluZyB9IH07XG4gIH1cblxuICBjb25zdCBjb250ZW50OiBzdHJpbmcgPSB0ZW1wbGF0ZShtZXRhZGF0YSk7XG5cbiAgY29uc3Qgb3B0aW9uczogT3B0aW9uc1dpdGhVcmwgPSB7XG4gICAgYm9keTogY29udGVudCxcbiAgICB1cmw6ICcnLFxuICB9O1xuXG4gIC8vIHByb3ZpZGVzIGZhbGxiYWNrIHN1cHBvcnQsIGl0J3MgYWNjZXB0IGFuIE9iamVjdCB7fSBhbmQgQXJyYXkgb2Yge31cbiAgaWYgKG5vdGlmeUVudHJ5LmhlYWRlcnMgJiYgXy5pc0FycmF5KG5vdGlmeUVudHJ5LmhlYWRlcnMpKSB7XG4gICAgY29uc3QgaGVhZGVyID0ge307XG4gICAgbm90aWZ5RW50cnkuaGVhZGVycy5tYXAoZnVuY3Rpb24oaXRlbSk6IHZvaWQge1xuICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLCBpdGVtKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpdGVtKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaGVhZGVyW2tleV0gPSBpdGVtW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0gaGVhZGVyO1xuICB9IGVsc2UgaWYgKE9iamVjdC5pcyhub3RpZnlFbnRyeS5oZWFkZXJzLCBub3RpZnlFbnRyeS5oZWFkZXJzKSkge1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IG5vdGlmeUVudHJ5LmhlYWRlcnM7XG4gIH1cblxuICBvcHRpb25zLm1ldGhvZCA9IG5vdGlmeUVudHJ5Lm1ldGhvZDtcblxuICBpZiAobm90aWZ5RW50cnkuZW5kcG9pbnQpIHtcbiAgICBvcHRpb25zLnVybCA9IG5vdGlmeUVudHJ5LmVuZHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIG5vdGlmeVJlcXVlc3Qob3B0aW9ucywgY29udGVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTm90aWZpY2F0aW9uKG1ldGFkYXRhOiBQYWNrYWdlLCBub3RpZnk6IE5vdGlmaWNhdGlvbiwgcmVtb3RlVXNlcjogUmVtb3RlVXNlciwgcHVibGlzaGVkUGFja2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgcmV0dXJuIGhhbmRsZU5vdGlmeShtZXRhZGF0YSwgbm90aWZ5LCByZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlKSBhcyBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3RpZnkobWV0YWRhdGE6IFBhY2thZ2UsIGNvbmZpZzogQ29uZmlnLCByZW1vdGVVc2VyOiBSZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4gfCB2b2lkIHtcbiAgaWYgKGNvbmZpZy5ub3RpZnkpIHtcbiAgICBpZiAoY29uZmlnLm5vdGlmeS5jb250ZW50KSB7XG4gICAgICByZXR1cm4gc2VuZE5vdGlmaWNhdGlvbihtZXRhZGF0YSwgKGNvbmZpZy5ub3RpZnkgYXMgdW5rbm93bikgYXMgTm90aWZpY2F0aW9uLCByZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbXVsdGlwbGUgbm90aWZpY2F0aW9ucyBlbmRwb2ludHMgUFIgIzEwOFxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKF8ubWFwKGNvbmZpZy5ub3RpZnksIGtleSA9PiBzZW5kTm90aWZpY2F0aW9uKG1ldGFkYXRhLCBrZXksIHJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2UpKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuIl19