"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../../lib/constants");

var _utils = require("../../../../lib/utils");

var _authUtils = require("../../../../lib/auth-utils");

var _cryptoUtils = require("../../../../lib/crypto-utils");

var _logger = require("../../../../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function normalizeToken(token) {
  return _objectSpread({}, token, {
    created: new Date(token.created).toISOString()
  });
}

; // https://github.com/npm/npm-profile/blob/latest/lib/index.js

function _default(route, auth, storage, config) {
  route.get('/-/npm/v1/tokens', async function (req, res, next) {
    const {
      name
    } = req.remote_user;

    if (_lodash.default.isNil(name) === false) {
      try {
        const tokens = await storage.readTokens({
          user: name
        });
        const totalTokens = tokens.length;

        _logger.logger.debug({
          totalTokens
        }, 'token list retrieved: @{totalTokens}');

        res.status(_constants.HTTP_STATUS.OK);
        return next({
          objects: tokens.map(normalizeToken),
          urls: {
            next: '' // TODO: pagination?

          }
        });
      } catch (error) {
        _logger.logger.error({
          error: error.msg
        }, 'token list has failed: @{error}');

        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, error.message));
      }
    } else {
      return next(_utils.ErrorCode.getUnauthorized());
    }
  });
  route.post('/-/npm/v1/tokens', function (req, res, next) {
    const {
      password,
      readonly,
      cidr_whitelist
    } = req.body;
    const {
      name
    } = req.remote_user;

    if (!_lodash.default.isBoolean(readonly) || !_lodash.default.isArray(cidr_whitelist)) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_DATA, _constants.SUPPORT_ERRORS.PARAMETERS_NOT_VALID));
    }

    auth.authenticate(name, password, async (err, user) => {
      if (err) {
        const errorCode = err.message ? _constants.HTTP_STATUS.UNAUTHORIZED : _constants.HTTP_STATUS.INTERNAL_ERROR;
        return next(_utils.ErrorCode.getCode(errorCode, err.message));
      } else {
        req.remote_user = user;

        if (!_lodash.default.isFunction(storage.saveToken)) {
          return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.NOT_IMPLEMENTED, _constants.SUPPORT_ERRORS.STORAGE_NOT_IMPLEMENT));
        }

        try {
          const token = await (0, _authUtils.getApiToken)(auth, config, user, password);
          const key = (0, _cryptoUtils.stringToMD5)(token); // TODO: use a utility here

          const maskedToken = (0, _utils.mask)(token, 5);
          const created = new Date().getTime();
          /**
           * cidr_whitelist: is not being used, we pass it through
           * token: we do not store the real token (it is generated once and retrieved to the user), just a mask of it.
           */

          const saveToken = {
            user: name,
            token: maskedToken,
            key,
            cidr: cidr_whitelist,
            readonly,
            created
          };
          await storage.saveToken(saveToken);

          _logger.logger.debug({
            key,
            name
          }, 'token @{key} was created for user @{name}');

          return next(normalizeToken({
            token,
            user: name,
            key: saveToken.key,
            cidr: cidr_whitelist,
            readonly,
            created: saveToken.created
          }));
        } catch (error) {
          _logger.logger.error({
            error: error.msg
          }, 'token creation has failed: @{error}');

          return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, error.message));
        }
      }
    });
  });
  route.delete('/-/npm/v1/tokens/token/:tokenKey', async (req, res, next) => {
    const {
      params: {
        tokenKey
      }
    } = req;
    const {
      name
    } = req.remote_user;

    if (_lodash.default.isNil(name) === false) {
      _logger.logger.debug({
        name
      }, '@{name} has requested remove a token');

      try {
        await storage.deleteToken(name, tokenKey);

        _logger.logger.info({
          tokenKey,
          name
        }, 'token id @{tokenKey} was revoked for user @{name}');

        return next({});
      } catch (error) {
        _logger.logger.error({
          error: error.msg
        }, 'token creation has failed: @{error}');

        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, error.message));
      }
    } else {
      return next(_utils.ErrorCode.getUnauthorized());
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,