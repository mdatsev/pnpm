"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _async = _interopRequireDefault(require("async"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _level = _interopRequireDefault(require("level"));

var _lib = require("@verdaccio/commons-api/lib");

var _localFs = _interopRequireWildcard(require("./local-fs"));

var _pkgUtils = require("./pkg-utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEPRECATED_DB_NAME = '.sinopia-db.json';
const DB_NAME = '.verdaccio-db.json';
const TOKEN_DB_NAME = '.token-db';

/**
 * Handle local database.
 */
class LocalDatabase {
  /**
   * Load an parse the local json database.
   * @param {*} path the database path
   */
  constructor(config, logger) {
    _defineProperty(this, "path", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "locked", void 0);

    _defineProperty(this, "tokenDb", void 0);

    this.config = config;
    this.path = this._buildStoragePath(config);
    this.logger = logger;
    this.locked = false;
    this.data = this._fetchLocalPackages();
    this.logger.trace({
      config: JSON.stringify(this.config, null, 4)
    }, '[local-storage]: configuration: @{config}');

    this._sync();
  }

  getSecret() {
    return Promise.resolve(this.data.secret);
  }

  setSecret(secret) {
    return new Promise(resolve => {
      this.data.secret = secret;
      resolve(this._sync());
    });
  }
  /**
   * Add a new element.
   * @param {*} name
   * @return {Error|*}
   */


  add(name, cb) {
    if (this.data.list.indexOf(name) === -1) {
      this.data.list.push(name);
      this.logger.debug({
        name
      }, '[local-storage]: the private package @{name} has been added');
      cb(this._sync());
    } else {
      cb(null);
    }
  }

  search(onPackage, onEnd, validateName) {
    const storages = this._getCustomPackageLocalStorages();

    this.logger.trace(`local-storage: [search]: ${JSON.stringify(storages)}`);

    const base = _path.default.dirname(this.config.self_path);

    const self = this;
    const storageKeys = Object.keys(storages);
    this.logger.trace(`local-storage: [search] base: ${base} keys ${storageKeys}`);

    _async.default.eachSeries(storageKeys, function (storage, cb) {
      const position = storageKeys.indexOf(storage);

      const base2 = _path.default.join(position !== 0 ? storageKeys[0] : '');

      const storagePath = _path.default.resolve(base, base2, storage);

      self.logger.trace({
        storagePath,
        storage
      }, 'local-storage: [search] search path: @{storagePath} : @{storage}');

      _fs.default.readdir(storagePath, (err, files) => {
        if (err) {
          return cb(err);
        }

        _async.default.eachSeries(files, function (file, cb) {
          self.logger.trace({
            file
          }, 'local-storage: [search] search file path: @{file}');

          if (storageKeys.includes(file)) {
            return cb();
          }

          if (file.match(/^@/)) {
            // scoped
            const fileLocation = _path.default.resolve(base, storage, file);

            self.logger.trace({
              fileLocation
            }, 'local-storage: [search] search scoped file location: @{fileLocation}');

            _fs.default.readdir(fileLocation, function (err, files) {
              if (err) {
                return cb(err);
              }

              _async.default.eachSeries(files, (file2, cb) => {
                if (validateName(file2)) {
                  const packagePath = _path.default.resolve(base, storage, file, file2);

                  _fs.default.stat(packagePath, (err, stats) => {
                    if (_lodash.default.isNil(err) === false) {
                      return cb(err);
                    }

                    const item = {
                      name: `${file}/${file2}`,
                      path: packagePath,
                      time: stats.mtime.getTime()
                    };
                    onPackage(item, cb);
                  });
                } else {
                  cb();
                }
              }, cb);
            });
          } else if (validateName(file)) {
            const base2 = _path.default.join(position !== 0 ? storageKeys[0] : '');

            const packagePath = _path.default.resolve(base, base2, storage, file);

            self.logger.trace({
              packagePath
            }, 'local-storage: [search] search file location: @{packagePath}');

            _fs.default.stat(packagePath, (err, stats) => {
              if (_lodash.default.isNil(err) === false) {
                return cb(err);
              }

              onPackage({
                name: file,
                path: packagePath,
                time: self._getTime(stats.mtime.getTime(), stats.mtime)
              }, cb);
            });
          } else {
            cb();
          }
        }, cb);
      });
    }, onEnd);
  }
  /**
   * Remove an element from the database.
   * @param {*} name
   * @return {Error|*}
   */


  remove(name, cb) {
    this.get((err, data) => {
      if (err) {
        cb((0, _lib.getInternalError)('error remove private package'));
        this.logger.error({
          err
        }, '[local-storage/remove]: remove the private package has failed @{err}');
      }

      const pkgName = data.indexOf(name);

      if (pkgName !== -1) {
        this.data.list.splice(pkgName, 1);
        this.logger.trace({
          name
        }, 'local-storage: [remove] package @{name} has been removed');
      }

      cb(this._sync());
    });
  }
  /**
   * Return all database elements.
   * @return {Array}
   */


  get(cb) {
    const list = this.data.list;
    const totalItems = this.data.list.length;
    cb(null, list);
    this.logger.trace({
      totalItems
    }, 'local-storage: [get] full list of packages (@{totalItems}) has been fetched');
  }

  getPackageStorage(packageName) {
    const packageAccess = this.config.getMatchedPackagesSpec(packageName);

    const packagePath = this._getLocalStoragePath(packageAccess ? packageAccess.storage : undefined);

    this.logger.trace({
      packagePath
    }, '[local-storage/getPackageStorage]: storage selected: @{packagePath}');

    if (_lodash.default.isString(packagePath) === false) {
      this.logger.debug({
        name: packageName
      }, 'this package has no storage defined: @{name}');
      return;
    }

    const packageStoragePath = _path.default.join(_path.default.resolve(_path.default.dirname(this.config.self_path || ''), packagePath), packageName);

    this.logger.trace({
      packageStoragePath
    }, '[local-storage/getPackageStorage]: storage path: @{packageStoragePath}');
    return new _localFs.default(packageStoragePath, this.logger);
  }

  clean() {
    this._sync();
  }

  saveToken(token) {
    const key = this._getTokenKey(token);

    const db = this.getTokenDb();
    return new Promise((resolve, reject) => {
      db.put(key, token, err => {
        if (err) {
          reject(err);
          return;
        }

        resolve();
      });
    });
  }

  deleteToken(user, tokenKey) {
    const key = this._compoundTokenKey(user, tokenKey);

    const db = this.getTokenDb();
    return new Promise((resolve, reject) => {
      db.del(key, err => {
        if (err) {
          reject(err);
          return;
        }

        resolve();
      });
    });
  }

  readTokens(filter) {
    return new Promise((resolve, reject) => {
      const tokens = [];
      const key = filter.user + ':';
      const db = this.getTokenDb();
      const stream = db.createReadStream({
        gte: key,
        lte: String.fromCharCode(key.charCodeAt(0) + 1)
      });
      stream.on('data', data => {
        tokens.push(data.value);
      });
      stream.once('end', () => resolve(tokens));
      stream.once('error', err => reject(err));
    });
  }

  _getTime(time, mtime) {
    return time ? time : mtime;
  }

  _getCustomPackageLocalStorages() {
    const storages = {}; // add custom storage if exist

    if (this.config.storage) {
      storages[this.config.storage] = true;
    }

    const {
      packages
    } = this.config;

    if (packages) {
      const listPackagesConf = Object.keys(packages || {});
      listPackagesConf.map(pkg => {
        const storage = packages[pkg].storage;

        if (storage) {
          storages[storage] = false;
        }
      });
    }

    return storages;
  }
  /**
   * Syncronize {create} database whether does not exist.
   * @return {Error|*}
   */


  _sync() {
    this.logger.debug('[local-storage/_sync]: init sync database');

    if (this.locked) {
      this.logger.error('Database is locked, please check error message printed during startup to prevent data loss.');
      return new Error('Verdaccio database is locked, please contact your administrator to checkout logs during verdaccio startup.');
    } // Uses sync to prevent ugly race condition


    try {
      // https://www.npmjs.com/package/mkdirp#mkdirpsyncdir-opts
      const folderName = _path.default.dirname(this.path);

      _mkdirp.default.sync(folderName);

      this.logger.debug({
        folderName
      }, '[local-storage/_sync]: folder @{folderName} created succeed');
    } catch (err) {
      // perhaps a logger instance?
      this.logger.debug({
        err
      }, '[local-storage/_sync/mkdirp.sync]: sync failed @{err}');
      return null;
    }

    try {
      _fs.default.writeFileSync(this.path, JSON.stringify(this.data));

      this.logger.debug('[local-storage/_sync/writeFileSync]: sync write succeed');
      return null;
    } catch (err) {
      this.logger.debug({
        err
      }, '[local-storage/_sync/writeFileSync]: sync failed @{err}');
      return err;
    }
  }
  /**
   * Verify the right local storage location.
   * @param {String} path
   * @return {String}
   * @private
   */


  _getLocalStoragePath(storage) {
    const globalConfigStorage = this.config ? this.config.storage : undefined;

    if (_lodash.default.isNil(globalConfigStorage)) {
      throw new Error('global storage is required for this plugin');
    } else {
      if (_lodash.default.isNil(storage) === false && _lodash.default.isString(storage)) {
        return _path.default.join(globalConfigStorage, storage);
      }

      return globalConfigStorage;
    }
  }
  /**
   * Build the local database path.
   * @param {Object} config
   * @return {string|String|*}
   * @private
   */


  _buildStoragePath(config) {
    const sinopiadbPath = this._dbGenPath(DEPRECATED_DB_NAME, config);

    try {
      _fs.default.accessSync(sinopiadbPath, _fs.default.constants.F_OK);

      return sinopiadbPath;
    } catch (err) {
      if (err.code === _localFs.noSuchFile) {
        return this._dbGenPath(DB_NAME, config);
      }

      throw err;
    }
  }

  _dbGenPath(dbName, config) {
    return _path.default.join(_path.default.resolve(_path.default.dirname(config.self_path || ''), config.storage, dbName));
  }
  /**
   * Fetch local packages.
   * @private
   * @return {Object}
   */


  _fetchLocalPackages() {
    const list = [];
    const emptyDatabase = {
      list,
      secret: ''
    };

    try {
      const db = (0, _pkgUtils.loadPrivatePackages)(this.path, this.logger);
      return db;
    } catch (err) {
      // readFileSync is platform specific, macOS, Linux and Windows thrown an error
      // Only recreate if file not found to prevent data loss
      if (err.code !== _localFs.noSuchFile) {
        this.locked = true;
        this.logger.error('Failed to read package database file, please check the error printed below:\n', `File Path: ${this.path}\n\n ${err.message}`);
      }

      return emptyDatabase;
    }
  }

  getTokenDb() {
    if (!this.tokenDb) {
      this.tokenDb = (0, _level.default)(this._dbGenPath(TOKEN_DB_NAME, this.config), {
        valueEncoding: 'json'
      });
    }

    return this.tokenDb;
  }

  _getTokenKey(token) {
    const {
      user,
      key
    } = token;
    return this._compoundTokenKey(user, key);
  }

  _compoundTokenKey(user, key) {
    return `${user}:${key}`;
  }

}

var _default = LocalDatabase;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,